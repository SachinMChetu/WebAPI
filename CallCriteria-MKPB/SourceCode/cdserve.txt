
Option Compare Text

Imports System.ServiceModel
Imports System.ServiceModel.Activation
Imports System.ServiceModel.Web

Imports System.Web
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Data
Imports Common
Imports System.Web.Script.Services
Imports System.Web.Script.Serialization
Imports System.IO
Imports System.Data.SqlClient


'IncludeExceptionDetailInFaults 

<ServiceBehavior(IncludeExceptionDetailInFaults:=True)>
<ServiceContract(Namespace:="http://webservices.callcriteria.com/")>
<AspNetCompatibilityRequirements(RequirementsMode:=AspNetCompatibilityRequirementsMode.Allowed)>
Public Class CDService


    ' To use HTTP GET, add <WebGet()> attribute. (Default ResponseFormat is WebMessageFormat.Json) 
    ' To create an operation that returns XML,
    '     add <WebGet(ResponseFormat:=WebMessageFormat.Xml)>,
    '     and include the following line in the operation body:
    '         WebOperationContext.Current.OutgoingResponse.ContentType = "text/xml"
    '<WebInvoke(Method:="GET", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    '<WebGet(ResponseFormat:=WebMessageFormat.Json)>


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetAgentAvgs(start_date As String, end_date As String, hdnAgentFilter As String) As String ' List(Of ScorePerf)



        Dim daily_avg As DataTable = GetTable("select convert(int,avg(isnull(isnull(edited_score,calib_score),vwForm.total_score))) as avg_score, convert(date,call_date) as call_date from vwForm with (nolock)  join userapps with (nolock)  on userapps.user_scorecard = vwForm.scorecard  join userextrainfo with (nolock)  on userextrainfo.username = reviewer  where convert(date, call_date) between '" & start_date & "' and '" & end_date & "' and userapps.username = '" & HttpContext.Current.User.Identity.Name & "' " & hdnAgentFilter & " group by convert(date,call_date) order by convert(date,call_date)")
        Dim graph_data As String = "["

        For Each dr In daily_avg.Rows
            graph_data &= "[new Date('" & dr("call_date") & "')," & dr("avg_score") & "],"
        Next

        If Right(graph_data, 1) = "," Then
            graph_data = Left(graph_data, Len(graph_data) - 1)
        End If

        graph_data &= "]"

        Return graph_data

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetScorePerf(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As String ' List(Of ScorePerf)



        'Dim daily_avg As DataTable = GetTable("select convert(int,avg(isnull(isnull(edited_score,calib_score),vwForm.total_score))) as avg_score, convert(date, call_date) as call_date from vwForm with (nolock) join userapps with (nolock) on userapps.user_scorecard = vwForm.scorecard join userextrainfo with (nolock) on userextrainfo.username = userapps.username where convert(date, call_date) between '" & start_date & "' and '" & end_date & "' and userextrainfo.username = '" & HttpContext.Current.User.Identity.Name & "' " & hdnAgentFilter & " group by convert(date, call_date) order by convert(date, call_date)")
        Dim daily_avg As DataTable = GetTable("exec [GetScorePerf] '" & start_date & "','" & end_date & "' ,'" & HttpContext.Current.User.Identity.Name & "',' " & hdnAgentFilter.Replace("'", "''") & "', '" & filter_array.Replace("'", "''") & "'")
        Dim graph_data As String = "["

        For Each dr In daily_avg.Rows
            graph_data &= "[new Date('" & dr("call_date") & "')," & dr("avg_score") & "],"
        Next

        If Right(graph_data, 1) = "," Then
            graph_data = Left(graph_data, Len(graph_data) - 1)
        End If

        graph_data &= "]"

        Return graph_data

    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetNotificationSteps(form_id As String) As String ' List(Of ScorePerf)
        Dim notify_dt As DataTable = GetTable("exec getMyNotifications '" & HttpContext.Current.User.Identity.Name & "', " & form_id)

        Dim dest_list As String = ""

        If notify_dt.Rows.Count > 0 Then

            Dim role As String = notify_dt.Rows(0).Item("user_role").ToString()

            If role = "Admin" Then
                'If role = "Admin" Then

                dest_list = "Notes Only|Supervisor|QA|TeamLead|Account Manager|Agenda Item|Close It"

                'btnSupervisor.Visible = True
                'btnQA.Visible = True
                'btnTeamLead.Visible = True
                'btnRuth.Visible = True
                'btnAgendaItem.Visible = True
                'btnCloseIt.Visible = True

            End If

            'If notify_dt.Rows(0).Item("myRole").ToString() = "1" Then

            Select Case notify_dt.Rows(0).Item("role").ToString()
                Case "QA Lead"
                    If role = "QA Lead" Then

                        dest_list = "Notes Only|Supervisor|QA|Account Manager|Agenda Item|Close It"

                        'btnSupervisor.Visible = True
                        'btnQA.Visible = True
                        'btnRuth.Visible = True
                        'btnAgendaItem.Visible = True
                        'btnCloseIt.Visible = True

                    End If
                Case "Calibrator"
                    If role = "Calibrator" Then

                        dest_list = "Notes Only|QA|TeamLead"
                        'btnTeamLead.Visible = True
                        'btnQA.Visible = True
                        'btnAckSupOverride.Visible = True
                    End If


                Case "Agent"
                    If role = "Agent" And notify_dt.Rows(0).Item("agent").ToString = HttpContext.Current.User.Identity.Name Then

                        dest_list = "Notes Only|Supervisor|Close It"
                        'btnSupervisor.Visible = True
                        'btnCloseIt.Visible = True
                        'chkEdit.Visible = False
                    End If
                Case "Supervisor", "Client", "Manager"

                    dest_list = "Notes Only|Agent|QA|Close It"

                    If notify_dt.Rows(0).Item("num_times_through_calibrator").ToString < 1 Then
                        dest_list = dest_list & "|Calibrator"
                        'btnCalibrator.Visible = True
                    Else
                        dest_list = dest_list & "|Team Lead"
                        'btnTeamLead.Visible = True
                    End If



                    'btnAgent.Visible = True
                    'btnQA.Visible = False
                    'lblSendTo.Visible = True
                    'btnCloseIt.Visible = True
                    If role = "Supervisor" Or role = "Client" Then
                        'btnManager.Visible = True
                        dest_list = dest_list & "|Manager"

                    End If

                Case "QA"
                    If role = "QA" And notify_dt.Rows(0).Item("reviewer").ToString = HttpContext.Current.User.Identity.Name Then

                        dest_list = "Notes Only|Close It"

                        'lblSendTo.Visible = True
                        'btnCloseIt.Visible = True
                        'chkEdit.Visible = False
                    End If
            End Select


        End If

        Return dest_list
    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetNotificationStatus(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As String ' List(Of ScorePerf)

        'Return start_date & ":" & end_date
        Dim ret_data As String = ""
        Dim row_count As Integer = 0
        Dim avg_dt As DataTable = GetTable("exec getNotificationStatus '" & start_date & "', '" & end_date & "',' " & hdnAgentFilter.Replace("'", "''") & "', '" & filter_array.Replace("'", "''") & "'")


        For Each dr As DataRow In avg_dt.Rows
            If row_count = 0 Then
                ret_data &= "<tr style='font-weight:bold'>"
            Else
                ret_data &= "<tr>"
            End If

            ret_data &= "<td>" & dr("Reviewer").ToString & "</td>"
            ret_data &= "<td>" & dr("TN").ToString & "</td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""AB"",""" & dr("Reviewer").ToString & """)';>" & dr("AB").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""AA"",""" & dr("Reviewer").ToString & """)';>" & dr("AA").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""AD"",""" & dr("Reviewer").ToString & """)';>" & dr("AD").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""SB"",""" & dr("Reviewer").ToString & """)';>" & dr("SB").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""SA"",""" & dr("Reviewer").ToString & """)';>" & dr("SA").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""SD"",""" & dr("Reviewer").ToString & """)';>" & dr("SD").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""QB"",""" & dr("Reviewer").ToString & """)';>" & dr("QB").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""QA"",""" & dr("Reviewer").ToString & """)';>" & dr("QA").ToString & "</span></td>"
            'ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""QD"",""" & dr("Reviewer").ToString & """)';>" & dr("QD").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""LD"",""" & dr("Reviewer").ToString & """)';>" & dr("LB").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""LA"",""" & dr("Reviewer").ToString & """)';>" & dr("LA").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""LD"",""" & dr("Reviewer").ToString & """)';>" & dr("LD").ToString & "</span></td>"
            ret_data &= "<td><span style='cursor:pointer'  onclick='pop_notif_detail(""TD"",""" & dr("Reviewer").ToString & """)';>" & dr("TD").ToString & "</span></td>"
            ret_data &= "</tr>"

            row_count += 1
        Next



        Return ret_data

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function getSCSectionStats(sc_id As String, start_date As String, end_date As String) As String

        'Return start_date & ":" & end_date
        Dim ret_data As String = ""
        Dim row_count As Integer = 0
        Dim avg_dt As DataTable = GetTable("exec getSCSectionStats '" & sc_id & "','" & start_date & "', '" & end_date & "'")


        Dim previous_section As String = ""


        For Each dr As DataRow In avg_dt.Rows

            If previous_section <> dr("section").ToString() Then ' new section -- create header and summary data
                ret_data &= "<tr data-datapoint='" + dr("top5").ToString & "'><td class='qname'><strong>" & dr("section").ToString & "</strong></td><td align='right' class='qscore' data-callscount='" & dr("section_right").ToString & " of " & dr("total_calls").ToString & " Calls'><strong>" & FormatNumber(dr("section_right") * 100 / dr("total_calls"), 1) & "</strong></td></tr>"
                previous_section = dr("section").ToString
            End If

            ret_data &= "<tr data-datapoint='" + dr("top5").ToString & "'>"

            ret_data &= "<td class='qname'><a data-QID='" + dr("qid").ToString & "' onclick=""getQuestionData('" & dr("q_short_name").ToString & "',$(this));"">" & dr("q_short_name").ToString & "</a></td>"
            ret_data &= "<td align='right' class='qscore' data-callscount='" & dr("num_right").ToString & " of " & dr("total_calls").ToString & " Calls'>" & FormatNumber(dr("num_right") * 100 / dr("total_calls"), 1) & "</td></tr>"

        Next



        Return ret_data

    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetQStats(q_id As String, start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As String

        'Return start_date & ":" & end_date
        Dim ret_data As String = ""
        Dim row_count As Integer = 0
        Dim avg_dt As DataTable = GetTable("exec getQStats '" & q_id & "','" & start_date & "', '" & end_date & "', '" & hdnAgentFilter & "', '" & filter_array & "'")


        For Each dr As DataRow In avg_dt.Rows

            ret_data &= "<tr>"
            If dr("right_answer").ToString() = "True" Then
                ret_data &= "<td style='color:green'>" & dr("answer_text").ToString & "</td>"
            Else
                ret_data &= "<td style='color:red'>" & dr("answer_text").ToString & "</td>"
            End If

            ret_data &= "<td>" & dr("percent_q").ToString & "</td>"
            ret_data &= "</tr>"

        Next

        avg_dt = GetTable("exec getQRStats '" & q_id & "','" & start_date & "', '" & end_date & "', '" & hdnAgentFilter & "', '" & filter_array & "'")


        For Each dr As DataRow In avg_dt.Rows

            ret_data &= "<tr class='comment-click' data-commentid='" & dr("id").ToString & "'>"
            If dr("right_answer").ToString() = "True" Then
                ret_data &= "<td style='color:green'>" & dr("comment").ToString & "</td>"
            Else
                ret_data &= "<td style='color:red'>" & dr("comment").ToString & "</td>"
            End If

            ret_data &= "<td>" & dr("percent_q").ToString & "</td>"
            ret_data &= "</tr>"

        Next





        Return ret_data

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetAverages(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As String ' List(Of ScorePerf)

        'Return start_date & ":" & end_date


        Dim prior_start_date As String = DateAdd(DateInterval.Month, -1, CDate(start_date)).ToShortDateString
        Dim prior_end_date As String = DateAdd(DateInterval.Month, -1, CDate(end_date)).ToShortDateString




        'Dim avg_dt As DataTable = GetTable("select isnull(convert(int,avg(isnull(isnull(edited_score,calib_score),vwForm.total_score))),0) as avg_score from vwForm with (nolock)  join userapps with (nolock) on vwForm.scorecard = userapps.user_scorecard join userextrainfo with (nolock) on userextrainfo.username = userapps.username left join calibration_form with (nolock) on vwForm.f_id = calibration_form.original_form   where convert(date, call_date) between '" & start_date & "' and '" & end_date & "'   and ((active_cali = 1) or (active_cali is null)) and userapps.username = '" & HttpContext.Current.User.Identity.Name & "' " & hdnAgentFilter & " union all select isnull(convert(int,avg(isnull(calibration_form.total_score, vwForm.total_score))),0) as avg_score from vwForm  with (nolock)  join userapps with (nolock) on userapps.user_scorecard = vwForm.scorecard join userextrainfo with (nolock) on userextrainfo.username = vwForm.reviewer  left join calibration_form with (nolock) on vwForm.f_id = calibration_form.original_form   where convert(date,call_date) between '" & prior_start_date & "' and '" & prior_end_date & "'  and ((active_cali = 1) or (active_cali is null)) and  userapps.username = '" & HttpContext.Current.User.Identity.Name & "'  " & hdnAgentFilter)

        Dim avg_dt As DataTable = GetTable("exec [GetAverages] '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter & "', '" & filter_array & "'")

        If avg_dt.Rows.Count = 2 Then
            Return avg_dt.Rows(0).Item(0) & ":" & avg_dt.Rows(0).Item(0) - avg_dt.Rows(1).Item(0)
        End If


        Return ""

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function UpdateNotification2(noti_id As Integer, noti_response As String, noti_button As String, noti_notes As String, noti_override As Boolean, noti_step As String, form_id As String, question_id As String) As disputeResult

        Dim disp_res As New disputeResult

        Dim sql As String = ""
        ' Dim btn As Button = sender

        Dim ack_by As String = HttpContext.Current.User.Identity.Name

        Dim role As String = Roles.GetRolesForUser(ack_by).Single()

        If noti_button <> "Notes Only" And noti_button <> "Update" Then
            If noti_notes <> "" Then
                sql = "update form_notifications set date_closed = Getdate(), closed_by = '" & ack_by & "', close_reason = 'Updated', comment = @new_comments where id = " & noti_id & " and date_closed is null and ((role = '" & role & "') or ('Admin'  = '" & role & "') or ('Client'  = '" & role & "')); "
            Else
                sql = "update form_notifications set date_closed = Getdate(), closed_by = '" & ack_by & "', close_reason = 'Updated', comment = @new_comments where id = " & noti_id & " and date_closed is null and ((role = '" & role & "') or ('Admin'  = '" & role & "') or ('Client'  = '" & role & "')); "
            End If
        Else
            If noti_notes <> "" Then
                sql = "insert into form_notifications (date_created,date_closed,closed_by,close_reason, comment, form_id, role) select Getdate(), Getdate(), '" & ack_by & "',  'Update',   @new_comments, " & form_id & ",(Select user_role from userextrainfo  with(nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'); "
            End If
        End If

        If noti_button = "Ack Sup Override" Then
            sql &= "delete from form_notifications where id = " & noti_id & "; "
        End If


        Select Case noti_button
            Case "Supervisor"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'Supervisor',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "Agent"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'Agent',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "Calibrator"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'Calibrator',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "QA"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'QA',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "Team Lead"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'QA Lead',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "Account Manager"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'Admin',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
            Case "Manager"
                sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by) select 'Manager',  GetDate(), " & form_id & ", '" & ack_by & "'"
                disp_res.dispute_complete = False
        End Select

        disp_res.dispute_response = sql


        'HttpContext.Current.Response.Write(sql)
        'HttpContext.Current.Response.End()

        If sql <> "" Then
            Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
            cn.Open()


            Dim reply As New SqlCommand(sql, cn)
            reply.CommandTimeout = 60
            reply.Parameters.AddWithValue("new_comments", noti_notes.ToString)
            reply.ExecuteNonQuery()
            cn.Close()
            cn.Dispose()
        End If



        'CreateComment()
        'If chkEdit.Checked Then
        '    Response.Redirect("edit_record.aspx?ID=" & form_id)
        'End If

        If noti_button = "Agenda Item" Then
            disp_res.dispute_redirect = "agenda_items.aspx"
        End If


        'gvComments.DataBind()

        'noti_notes = ""

        'If noti_button <> "Add Note" Then
        '    lblSendTo.Visible = False
        '    btnSupervisor.Visible = False
        '    btnCalibrator.Visible = False
        '    btnTeamLead.Visible = False
        '    btnRuth.Visible = False

        'End If

        'setup_notifications()

        Return disp_res

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function UpdateNotification(noti_id As Integer, noti_response As String, noti_button As String, noti_notes As String, noti_override As Boolean, noti_step As String, form_id As String, question_id As String) As disputeResult


        Dim disres As New disputeResult

        Dim ack_by As String = ""

        ack_by = HttpContext.Current.User.Identity.Name


        Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & ack_by & "'")

        If user_dt.Rows.Count > 0 Then
            noti_step = user_dt.Rows(0).Item("user_role").ToString 
        End If

        Dim sql As String = ""

        Dim addl_sql As String = ""

        If noti_override = True Then
            addl_sql = " sup_override = 1, "
        End If

        disres.dispute_complete = True


        Dim prev_step As String = " with "
        Select Case noti_step
            Case "Supervisor"
                prev_step &= "QA"

            Case "QA"
                prev_step &= "Supervisor"

            Case "QA Lead", "Calibrator"
                prev_step &= "Supervisor"

            Case "Agent"
                prev_step &= "QA"
        End Select


        Select Case noti_response
            Case "Agree"
                sql = "update form_notifications set role = (select user_role from Userextrainfo where username = '" & ack_by & "'), comment =  @new_comments, date_closed = GetDate(), closed_by = '" & ack_by & "', close_reason  = '" & noti_response & "' where id = " & noti_id & "; "
                If noti_notes = "" Then
                    sql &= "INSERT INTO [form_notifications] ([role], [date_created], date_closed,  [form_id],  opened_by, closed_by, comment, close_reason, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), GetDate(), " & form_id & ", '" & ack_by & "','" & ack_by & "','" & noti_step & " AGREED " & prev_step & "','Agree','" & question_id & "'; "
                Else
                    noti_notes = noti_step & " AGREED " & prev_step & " - " & noti_notes
                End If
                If noti_step = "QA Lead" Or noti_step = "Calibrator" Then
                    disres.dispute_complete = False
                    noti_step = "QAL to QA"
                    noti_response = "Disagree"
                    sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), " & form_id & ", '" & ack_by & "','" & question_id & "'"
                End If
            Case "Disagree"
                sql = "update form_notifications set  role = (select user_role from Userextrainfo where username = '" & ack_by & "'), comment =  @new_comments, date_closed = GetDate(), closed_by = '" & ack_by & "', close_reason  = '" & noti_response & "' where id = " & noti_id & "; "
                If noti_notes = "" Then
                    sql &= "INSERT INTO [form_notifications] ([role], [date_created], date_closed,  [form_id],  opened_by, closed_by, comment, close_reason, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), GetDate(), " & form_id & ", '" & ack_by & "','" & ack_by & "','" & noti_step & " DISAGREED " & prev_step & "','Disagree','" & question_id & "'; "
                Else
                    noti_notes = noti_step & " DISAGREED " & prev_step & " - " & noti_notes
                End If
                disres.dispute_complete = False
            Case "Notes Only"
                UpdateTable("INSERT INTO [form_notifications] ([role], [date_created], [date_closed], closed_by,  [form_id],  opened_by,  comment, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(),  GetDate(),'" & ack_by & "'," & form_id & ", '" & ack_by & "','" & noti_notes.Replace("'", "''") & "','" & question_id & "'; ")
                disres.dispute_complete = False
        End Select


        If ((noti_response = "Disagree") Or ((noti_id = 0) And noti_button = "New")) And Not noti_override Then
            Select Case noti_step
                Case "Supervisor", "Client"
                    sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), " & form_id & ", '" & ack_by & "','" & question_id & "'; Select @@identity;"

                Case "QA Lead", "Calibrator"

                    sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), " & form_id & ", '" & ack_by & "','" & question_id & "'; Select @@identity;"

                Case "Agent"
                    sql &= "INSERT INTO [form_notifications] ([role], [date_created],  [form_id],  opened_by, question_id) select  (select user_role from Userextrainfo where username = '" & ack_by & "'),  GetDate(), " & form_id & ", '" & ack_by & "','" & question_id & "'; Select @@identity;"
            End Select

        End If
        'Return sql
        disres.dispute_response = sql

        Dim result_dt As Integer = 0


        If sql <> "" Then
            Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
            cn.Open()

            Dim reply As New SqlCommand(sql, cn)
            reply.CommandTimeout = 60
            If noti_response <> "" Then
                reply.Parameters.AddWithValue("new_comments", noti_notes)
            End If
            'Email_Error(sql & "<br>" & noti_step)
            result_dt = reply.ExecuteScalar()
            'reply.ExecuteNonQuery()

            cn.Close()
            cn.Dispose()

        End If


        If noti_override = False And noti_response = "Disagree" And ((noti_step = "Supervisor") Or (noti_step = "Client")) Then

            Dim noti_dt As DataTable = GetTable("select form_id from form_notifications with (nolock) where id = " & noti_id)
            If noti_dt.Rows.Count > 0 Then
                'Email_Error("Supervisor disagrees - review_record.aspx?ID=" & noti_dt.Rows(0).Item(0), "tracy@callcriteria.com;carlo@callcriteria.com")
            End If
        End If

        If noti_id = 0 Then
            disres.dispute_id = result_dt
        Else
            disres.dispute_id = noti_id
        End If

        UpdateTable("exec updateAllComments " & form_id)

        ' CreateComment(noti_response, noti_id)

        Return disres

    End Function

    Public Class disputeResult
        Public dispute_complete As Boolean
        Public dispute_id As Integer
        Public dispute_response As String
        Public dispute_redirect As String
    End Class

    Protected Sub CreateComment(noti_response As String, noti_id As String)
        If noti_response <> "" Then
            Dim sql As String
            sql = "insert into system_comments(comment_who, comment_date, comment, comment_type, comment_id) select '" & HttpContext.Current.User.Identity.Name & "', Getdate(), @new_comments, 'Notification', " & noti_id
            Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
            cn.Open()

            Dim reply As New SqlCommand(sql, cn)
            reply.CommandTimeout = 60
            If noti_response <> "" Then
                reply.Parameters.AddWithValue("new_comments", noti_response)
            End If
            reply.ExecuteNonQuery()
            cn.Close()
            cn.Dispose()



        End If

    End Sub

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetStats(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As Stats


        Dim stats_dt As DataTable = GetTable("getTodayStats '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter.Replace("'", "''") & "','" & filter_array & "'")

        Dim _stats As New Stats
        'row 0 is now, row 1 is compare
        _stats.CallsReviewed = stats_dt.Rows(0).Item("total_calls")
        _stats.CRCallDifference = stats_dt.Rows(0).Item("total_calls") - stats_dt.Rows(1).Item("total_calls")
        If stats_dt.Rows(0).Item("total_calls") > stats_dt.Rows(1).Item("total_calls") Then
            _stats.CRDirection = "positive"
        Else
            _stats.CRDirection = "negative"
        End If

        _stats.CallsFailed = stats_dt.Rows(0).Item("total_fails")
        _stats.CFDifference = stats_dt.Rows(0).Item("total_fails") - stats_dt.Rows(1).Item("total_fails")
        If stats_dt.Rows(0).Item("total_fails") > stats_dt.Rows(1).Item("total_fails") Then
            _stats.CFDirection = "positive"
        Else
            _stats.CFDirection = "negative"
        End If

        _stats.NumMinutes = stats_dt.Rows(0).Item("total_minutes")
        _stats.NMDifference = stats_dt.Rows(0).Item("total_minutes") - stats_dt.Rows(1).Item("total_minutes")
        If stats_dt.Rows(0).Item("total_minutes") > stats_dt.Rows(1).Item("total_minutes") Then
            _stats.NMDirection = "positive"
        Else
            _stats.NMDirection = "negative"
        End If

        _stats.NumAgents = stats_dt.Rows(0).Item("total_agents")
        _stats.NADifference = stats_dt.Rows(0).Item("total_agents") - stats_dt.Rows(1).Item("total_agents")
        If stats_dt.Rows(0).Item("total_agents") > stats_dt.Rows(1).Item("total_agents") Then
            _stats.NADirection = "positive"
        Else
            _stats.NADirection = "negative"
        End If


        Return _stats

    End Function
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetMyCalibrations(username As String) As String

        Dim user_roles As String = String.Join(", ", Roles.GetRolesForUser(username))

        Dim cali_dt As DataTable

        Select Case user_roles
            Case "Client", "Supervisor", "Manager"
                cali_dt = GetTable("select dbo.ConvertTimeToHHMMSS(sum(call_length),'s') as calltime, count(*) as num_calls, scorecards.short_name, scorecards.id from cali_pending_client with (nolock) join vwForm with (nolock) on vwForm.F_ID = form_id join scorecards with (nolock) on scorecards.id = vwForm.scorecard  where assigned_to = '" & HttpContext.Current.User.Identity.Name & "' and date_completed is null group by scorecards.short_name, scorecards.id")
            Case "QA Lead"
                cali_dt = GetTable("select dbo.ConvertTimeToHHMMSS(sum(call_length),'s') as calltime, count(*) as num_calls, scorecards.short_name, scorecards.id from calibration_pending with (nolock) join vwForm with (nolock) on vwForm.F_ID = form_id join scorecards with (nolock) on scorecards.id = vwForm.scorecard join userapps with (nolock) on vwForm.scorecard = userapps.user_scorecard where username = '" & HttpContext.Current.User.Identity.Name & "' and date_completed is null  and isrecal = 1  and vwForm.reviewer != '" & username & "'  and team_lead = '" & HttpContext.Current.User.Identity.Name & "' group by scorecards.short_name, scorecards.id, user_priority order by user_priority")
            Case "Calibrator", "Admin"
                cali_dt = GetTable("select dbo.ConvertTimeToHHMMSS(sum(call_length),'s') as calltime, count(*) as num_calls, scorecards.short_name, scorecards.id from calibration_pending with (nolock) join vwForm with (nolock) on vwForm.F_ID = form_id join scorecards with (nolock) on scorecards.id = vwForm.scorecard join userapps with (nolock) on vwForm.scorecard = userapps.user_scorecard where username = '" & HttpContext.Current.User.Identity.Name & "' and date_completed is null and isrecal = 0 and vwForm.reviewer != '" & username & "' group by scorecards.short_name, scorecards.id, user_priority order by user_priority")
        End Select



        Dim ret_string As String = ""
        Dim total_time As New TimeSpan(0, 0, 0)


        If cali_dt.Rows.Count > 0 Then
            ret_string = "<tr><td><strong>Listen</strong></td><td colspan='2'><a href='calibrate_listen.aspx' target='_blank'><img src='/img/small_play.png' height=30></a></td></tr>"
        End If

        For Each dr As DataRow In cali_dt.Rows
            Dim call_item_pieces() As String = dr("calltime").ToString.Split(":")
            Dim temp_ts As New TimeSpan(call_item_pieces(0), call_item_pieces(1), call_item_pieces(2))
            total_time = total_time.Add(temp_ts)
            ret_string &= "<tr><td>" & dr("short_name").ToString & "</td><td>" & dr("num_calls").ToString & "</td><td>" & dr("calltime").ToString & "</td></tr>"
        Next

        Dim time_left_dt As DataTable = GetTable("select avg(datediff(s, calibration_form.review_started, calibration_form.review_date)/call_length) as avg_speed from vwFOrm with (nolock) join calibration_form with (nolock) on calibration_form.original_form = vwForm.f_id  where call_length > 0 and call_length is not null and calibration_form.reviewed_by = '" & username & "' and calibration_form.review_date > dateadd(d, -30, getdate())")
        If time_left_dt.Rows.Count > 0 Then
            If Not IsDBNull(time_left_dt.Rows(0).Item(0)) Then
                total_time = TimeSpan.FromTicks(total_time.Ticks * time_left_dt.Rows(0).Item(0))
            End If
        End If

        Return CInt(total_time.TotalHours) & ":" & total_time.ToString("mm\:ss") & "|" & ret_string
        'Return time_left_dt.Rows(0).Item(0) & "|" & ret_string
    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetSearchResults(test_string As String) As List(Of search_results)
        ' exec SearchAutoComplete '700','stacemoss'
        Dim sr_items As New List(Of search_results)

        Dim sr_dt As DataTable = GetTable("exec SearchAutoComplete '" & test_string.Replace("'", "''") & "','" & HttpContext.Current.User.Identity.Name & "'")

        For Each dr As DataRow In sr_dt.Rows
            Dim _sr_item As New search_results
            _sr_item.label = dr("item_type").ToString
            _sr_item.value = dr("suggested").ToString
            _sr_item.form_id = dr("form_id").ToString
            sr_items.Add(_sr_item)
        Next

        Return sr_items
    End Function

    Public Class search_results
        Public value As String
        Public label As String
        Public form_id As String
    End Class
    Public Class ActiveQAStats
        Public reviewer As String
        Public number_calls As String
        Public short_name As String
        Public Last_reviewed As String
        Public days_active As String

    End Class



    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetActiveQA(start_date As String, end_date As String) As List(Of ActiveQAStats)


        Dim mi_items As New List(Of ActiveQAStats)


        Dim stats_dt As DataTable

        stats_dt = GetTable("exec getActiveQA '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "'")


        For Each dr In stats_dt.Rows
            Dim _mi As New ActiveQAStats
            _mi.reviewer = dr("reviewer").ToString
            _mi.number_calls = dr("number_calls").ToString
            _mi.short_name = dr("short_name").ToString
            _mi.Last_reviewed = dr("Last_reviewed").ToString
            _mi.days_active = dr("days_active").ToString

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function





    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetAgentRanking(start_date As String, end_date As String, hdnAgentFilter As String, Optional q_short_name As String = "") As List(Of AgentRanks)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""


        Dim mi_items As New List(Of AgentRanks)


        Dim stats_dt As DataTable
        If q_short_name <> "" Then
            stats_dt = GetTable("getAgentRanking '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter.Replace("'", "''") & "','" & q_short_name & "'")
        Else
            stats_dt = GetTable("getAgentRanking '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter.Replace("'", "''") & "'")
        End If


        For Each dr In stats_dt.Rows
            Dim _mi As New AgentRanks
            _mi.avg_score = dr("avg_score").ToString
            _mi.agent_name = dr("agentname").ToString
            _mi.div_color = dr("div_color").ToString
            _mi.top3 = dr("top3").ToString
            _mi.ni_scorecard = dr("ni_scorecard").ToString
            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function

    Public Class AgentRanks
        Public avg_score As String
        Public agent_name As String
        Public div_color As String
        Public top3 As String
        Public ni_scorecard As String
    End Class
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function getNotificationData(form_id As String) As NotificationData
        Dim nd_dt As DataTable = GetTable("select total_score, agent, phone, review_date,  dbo.[GetFormattedMQ] (" & form_id & ") as missed_blob, [dbo].[getNotificationComments] (" & form_id & ") as comments from vwForm with (nolock) where F_ID = " & form_id)
        Dim notidata As New NotificationData
        If nd_dt.Rows.Count > 0 Then
            notidata.agent = nd_dt.Rows(0).Item("agent").ToString
            notidata.total_score = nd_dt.Rows(0).Item("total_score").ToString
            notidata.phone = nd_dt.Rows(0).Item("phone").ToString
            notidata.review_date = nd_dt.Rows(0).Item("review_date").ToString
            notidata.Missed_blob = nd_dt.Rows(0).Item("Missed_blob").ToString
            notidata.comments = nd_dt.Rows(0).Item("comments").ToString

        End If
        Return notidata
    End Function
    Public Class NotificationData
        Public agent As String
        Public phone As String
        Public total_score As String
        Public review_date As String
        Public Missed_blob As String
        Public comments As String
    End Class




    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function getAppsStatus(start_date As String, end_date As String) As List(Of AppStatus)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""


        Dim mi_items As New List(Of AppStatus)


        Dim stats_dt As DataTable = GetTable("getAppsStatus '" & start_date & "','" & end_date & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New AppStatus
            _mi.appname = dr("appname").ToString
            _mi.total_loaded = dr("total_loaded").ToString
            _mi.pending = dr("pending").ToString
            _mi.need_audio = dr("need_audio").ToString
            _mi.bad_calls = dr("bad_calls").ToString
            _mi.Priority = dr("Priority").ToString

            _mi.Last_Loaded_Date = CDate(dr("Last Loaded Date")).ToShortDateString
            _mi.avg_score = dr("avg_score").ToString
            _mi.std_dev = dr("std_dev").ToString
            _mi.number_loaded = dr("number_loaded").ToString
            _mi.call_date = dr("call_date").ToString

            mi_items.Add(_mi)


        Next


        Return mi_items

    End Function

    Public Structure AppStatus
        Public appname As String
        Public total_loaded As String
        Public pending As String
        Public need_audio As String
        Public bad_calls As String
        Public Priority As String
        Public Last_Loaded_Date As String
        Public avg_score As String
        Public std_dev As String
        Public number_loaded As String
        Public call_date As String

    End Structure
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetPay(username As String, week_ending As String, scorecard As String) As String

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""

        If scorecard = "undefined" Then scorecard = "ALL"


        ' Dim pd_items As New List(Of PayData)

        Dim user_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'")


        Dim stats_dt As DataTable

        If user_dt.Rows(0).Item("user_role") = "Calibrator" Then
            stats_dt = GetTable("getPay2SCCalib '" & HttpContext.Current.User.Identity.Name & "','" & week_ending & "','" & scorecard & "'")
        Else
            stats_dt = GetTable("getPay2SC '" & HttpContext.Current.User.Identity.Name & "','" & week_ending & "','" & scorecard & "'")
        End If


        Dim ret_val As String = ""

        Dim total_pay As Single = 0
        Dim base_pay As String = "0"
        Dim start_date As String = ""
        Dim num_by_qal As Integer = 0



        If user_dt.Rows(0).Item("user_role") = "Calibrator" Then
            For Each dr In stats_dt.Rows
                base_pay = dr("base").ToString
                start_date = dr("startdate").ToString
                Try
                    num_by_qal = dr("num_by_qal").ToString

                Catch ex As Exception
                    num_by_qal = "0"

                End Try

                ret_val &= "<tr><td>Scorecard</td><td>" & dr("short_name").ToString & "</td></tr>"
                ret_val &= "<tr><td>Review Time</td><td>" & dr("reviewtime").ToString & "</td></tr>"
                ret_val &= "<tr><td>Calibration Score</td><td><a href='view_calibration.aspx?reviewer=" & HttpContext.Current.User.Identity.Name & "&we_date=" & week_ending & "&scorecard=" & dr("scorecard") & "' target=_blank>" & FormatNumber(dr("calibration_score").ToString, 2) & "</a></td></tr>"
                ret_val &= "<tr><td>Adjust Hourly Rate</td><td>" & FormatCurrency(dr("base") * (100 + dr("cal_percent").ToString) / 100) & "</td></tr>"

                Dim new_base As Single = dr("base") * (100 + dr("cal_percent").ToString) / 100

                'ret_val &= "<tr><td>Disputes</td><td><a href='ValidDisputes.aspx?wedate=" & week_ending & "&qa=" & HttpContext.Current.User.Identity.Name & "' target=_blank>" & dr("num_disputes").ToString & "</a></td></tr>"
                'ret_val &= "<tr><td>Disputes Deduction</td><td>" & FormatCurrency(new_base * 0.2 * dr("num_disputes")) & "</td></tr>"
                Dim rev_time() As String = dr("reviewtime").ToString.Split(":")
                If rev_time.Length = 3 Then
                    ret_val &= "<tr><td>Pay</td><td>" & FormatCurrency(new_base * (rev_time(0) + rev_time(1) / 60 + rev_time(2) / 3600) + dr("websites") * dr("website_pay")) & "</td></tr>"
                    total_pay += new_base * (rev_time(0) + rev_time(1) / 60 + rev_time(2) / 3600) + dr("websites") * dr("website_pay")
                Else
                    ret_val &= "<tr><td>Pay</td><td>$0.00</td></tr>"
                End If
                ret_val &= "<tr><td colspan=2>&nbsp;</td></tr>"
            Next

            stats_dt = GetTable("getPay2SC '" & HttpContext.Current.User.Identity.Name & "','" & week_ending & "','" & scorecard & "'")

            If stats_dt.Rows.Count > 0 Then
                ret_val &= "<tr><td colspan=2>QA Pay</td></tr>"
                ret_val &= "<tr><td colspan=2><hr></td></tr>"
            End If
        End If
        'Else
        'startdate   base	calltime	reviewtime	swing_reviewtime	efficiency	calibration_score	num_calibrations	
        'cal_percent eff_percent	num_disputes	scorecard_hours	dispute_cost	appname	websitetime	short_name	websites	avg_website	user_type
        For Each dr In stats_dt.Rows
            base_pay = dr("base").ToString
            start_date = dr("startdate").ToString

            ret_val &= "<tr><td>Scorecard</td><td>" & dr("short_name").ToString & "</td></tr>"
            ret_val &= "<tr><td>Review Time</td><td>" & dr("reviewtime").ToString & "</td></tr>"
            ret_val &= "<tr><td>Call Speed</td><td>" & dr("efficiency").ToString & "</td></tr>"
            ret_val &= "<tr><td>Calibration Score</td><td><a href='view_calibration.aspx?reviewer=" & HttpContext.Current.User.Identity.Name & "&we_date=" & week_ending & "&scorecard=" & dr("scorecard") & "' target=_blank>" & FormatNumber(dr("calibration_score").ToString, 2) & "</a></td></tr>"


            Dim new_base As Single = 0

            If IsNumeric(dr("efficiency").ToString) Then
                new_base = dr("base") * (100 + dr("cal_percent").ToString) * FormatNumber(((dr("efficiency") - 100) / 2 + 100), 2) / 100 / 100
            End If

            ret_val &= "<tr><td>Adjust Hourly Rate</td><td>" & FormatCurrency(new_base, 2) & "</td></tr>"

            ret_val &= "<tr><td>Disputes</td><td><a href='ValidDisputes.aspx?wedate=" & week_ending & "&qa=" & HttpContext.Current.User.Identity.Name & "' target=_blank>" & dr("num_disputes").ToString & "</a></td></tr>"
            ret_val &= "<tr><td>Disputes Deduction</td><td>" & FormatCurrency(new_base * 0.2 * dr("num_disputes")) & "</td></tr>"
            Dim rev_time() As String = dr("reviewtime").ToString.Split(":")
            If rev_time.Length = 3 Then
                ret_val &= "<tr><td>Pay</td><td>" & FormatCurrency(new_base * (rev_time(0) + rev_time(1) / 60 + rev_time(2) / 3600) - dr("base") * 0.2 * dr("num_disputes") + dr("websites") * dr("website_pay")) & "</td></tr>"
                total_pay += new_base * (rev_time(0) + rev_time(1) / 60 + rev_time(2) / 3600) - dr("base") * 0.2 * dr("num_disputes") + dr("websites") * dr("website_pay")
            Else
                ret_val &= "<tr><td>Pay</td><td>$0.00</td></tr>"
            End If
            ret_val &= "<tr><td colspan=2>&nbsp;</td></tr>"
        Next


        'End If



        Dim header As String = "<table class='detailsTable' style='font:smaller;'><tr><td><strong>Summary</strong></td></tr>"
        header &= "<tr><td>Start Date</td><td>" & start_date & "</td></tr>"
        header &= "<tr><td>Base Pay</td><td>" & FormatCurrency(base_pay) & "</td></tr>"
        header &= "<tr><td>Total Pay</td><td>" & FormatCurrency(total_pay + num_by_qal * 0.4) & "</td></tr>"
        header &= "<tr><td><strong>Details</strong></td></tr>"
        ret_val = header & ret_val

        If user_dt.Rows(0).Item("user_role") = "Calibrator" Then
            ret_val &= "<tr><td>Notification Pay</td></tr>"
            ret_val &= "<tr><td>Pay Per Notificaiton</td><td>$0.40</td></tr>"
            ret_val &= "<tr><td>Notification Completed</td><td>" & num_by_qal & "</td></tr>"
            ret_val &= "<tr><td>Total Pay</td><td>" & FormatCurrency(num_by_qal * 0.4) & "</td></tr>"
        End If
        ret_val &= "</table>"

        'For Each dr In stats_dt.Rows
        '    Dim _pd As New PayData
        '    _pd.startdate = dr("startdate").ToString
        '    _pd.base = dr("base").ToString
        '    _pd.calltime = dr("calltime").ToString
        '    _pd.reviewtime = dr("reviewtime").ToString
        '    _pd.swing_reviewtime = dr("swing_reviewtime").ToString
        '    _pd.efficiency = dr("efficiency").ToString
        '    _pd.num_calibrations = dr("num_calibrations").ToString
        '    _pd.cal_percent = dr("cal_percent").ToString
        '    _pd.eff_percent = dr("eff_percent").ToString
        '    _pd.num_disputes = dr("num_disputes").ToString
        '    _pd.calibration_score = dr("calibration_score").ToString
        '    _pd.appname = dr("appname").ToString
        '    _pd.dispute_cost = dr("dispute_cost").ToString
        '    _pd.websites = dr("websites").ToString
        '    _pd.avg_website = dr("avg_website").ToString
        '    _pd.website_time = dr("websitetime").ToString
        '    _pd.short_name = dr("short_name").ToString
        '    _pd.user_type = dr("user_type").ToString
        '    pd_items.Add(_pd)

        'Next


        Return ret_val

    End Function

    Public Structure PayData
        Public startdate As String
        Public base As String
        Public calltime As String
        Public reviewtime As String
        Public swing_reviewtime As String
        Public efficiency As String
        Public num_calibrations As String
        Public dispute_cost As String
        Public cal_percent As String
        Public eff_percent As String
        Public num_disputes As String
        Public calibration_score As String
        Public appname As String
        Public websites As String
        Public avg_website As String
        Public website_time As String
        Public short_name As String
        Public user_type As String

    End Structure
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetQATopMissed(start_date As String, end_date As String, hdnAgentFilter As String, agent As String) As List(Of MissedItems)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""



        Dim mi_items As New List(Of MissedItems)


        Dim stats_dt As DataTable = GetTable("getTopMissedCalibWithQA '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter.Replace("'", "''") & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New MissedItems
            _mi.num_calls = dr("num_calls").ToString
            _mi.div_color = dr("div_color").ToString
            _mi.Percent_Qs = dr("Percent_Qs").ToString
            _mi.q_short_name = dr("q_short_name").ToString
            _mi.top_missed = dr("top_missed").ToString
            _mi.total_wrong = dr("total_wrong").ToString
            _mi.QID = dr("question_id").ToString
            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetTopMissed(start_date As String, end_date As String, hdnAgentFilter As String, agent As String, Optional filter_array As String = "") As List(Of MissedItems)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""



        Dim mi_items As New List(Of MissedItems)


        Dim stats_dt As DataTable = GetTable("getMissedWithReps '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "','" & hdnAgentFilter.Replace("'", "''") & "','" & agent & "','" & filter_array & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New MissedItems
            _mi.num_calls = dr("num_calls").ToString
            _mi.div_color = dr("div_color").ToString
            _mi.Percent_Qs = dr("Percent_Qs").ToString
            _mi.q_short_name = dr("q_short_name").ToString
            _mi.top_missed = dr("top_missed").ToString
            _mi.total_wrong = dr("total_wrong").ToString
            _mi.QID = dr("question_id").ToString
            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function



    Public Class MissedItems
        Public top_missed As String
        Public q_short_name As String
        Public div_color As String
        Public total_wrong As String
        Public num_calls As String
        Public Percent_Qs As String
        Public QID As String

    End Class


    Public Class DBOptions
        Public value As String
        Public text As String
        Public selected As String
    End Class
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Sub clearDash()
        UpdateTable("delete from UserDash where username = '" & HttpContext.Current.User.Identity.Name & "'")
    End Sub

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Sub deDupeDash()
        UpdateTable("exec dedupedash '" & HttpContext.Current.User.Identity.Name & "'")
    End Sub
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Sub updateDash(controlname As String, controlorder As String)
        UpdateTable("updateDash @username = '" & HttpContext.Current.User.Identity.Name & "', @controlname='" & controlname & "', @controlorder='" & controlorder & "'")
    End Sub

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Sub RemoveDash(controlname As String, controlorder As String)
        UpdateTable("delete from userdash where username = '" & HttpContext.Current.User.Identity.Name & "' and controlname='" & controlname & "'")
    End Sub
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetIndicators(form_id As String) As String

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"

        Dim div_response As String = ""

        Dim call_dt As DataTable = GetTable("select * from form_score3 with (nolock) where id = " & form_id)

        Dim call_length As String = ""

        If call_dt.Rows.Count > 0 Then
            call_length = call_dt.Rows(0).Item("call_length")
        End If


        Dim stats_dt As DataTable
        stats_dt = GetTable("select q_short_name,q_position,case when right_answer = 0 then 'bad-response' else '' end as [bad-response] from dbo.form_q_scores fs with (nolock) join [Questions] q with (nolock) on fs.question_ID = q.ID join question_answers qa with (nolock) on qa.ID = question_answered where form_ID = " & form_id)
        'each answer
        For Each dr In stats_dt.Rows
            Dim position As Integer = 0

            If call_length > 0 And dr("q_position").ToString <> "" Then
                position = CInt(dr("q_position") / call_length * 100)
            End If

            If dr("bad-response").ToString = "" Then
                div_response &= " <div class='warning-part' style='left: " & position & "%;' title='" & dr("q_short_name") & "'><span></span><a onclick='jumpPos(" & dr("q_position") & ");' class='listen-from-here' style='background: none repeat scroll 0% 0% rgb(154, 190, 46);'>&#x2714</a></div>" & Chr(13)
            Else
                div_response &= " <div class='warning-part' style='left: " & position & "%;' title='" & dr("q_short_name") & "'><span></span><a onclick='jumpPos(" & dr("q_position") & ");' class='listen-from-here'>!</a></div>" & Chr(13)
            End If

        Next

        stats_dt = GetTable("select option_value, option_pos from form_q_scores_options with (nolock) where form_id = " & form_id & " and question_id in (select id from questions with (nolock) where template='Preferences')")
        'each template answer
        For Each dr In stats_dt.Rows
            Dim position As Integer = 0

            If call_length > 0 And dr("option_pos").ToString <> "" Then
                position = CInt(dr("option_pos") / call_length * 100)
            End If

            div_response &= " <div class='warning-part' style='left: " & position & "%;' title='" & dr("option_value").ToString & "'><span></span><a onclick='jumpPos(" & dr("option_pos") & ");' class='listen-from-here' style='cursor: pointer;background: none repeat scroll 0% 0% rgb(102,178,255);'>&#x2724</a></div>" & Chr(13)

        Next

        stats_dt = GetTable("select option_value, option_pos from form_q_scores_options with (nolock) where form_id = " & form_id & " and question_id in (select id from questions with (nolock) where template='Preferences')")
        'each template answer
        For Each dr In stats_dt.Rows
            Dim position As Integer = 0

            If call_length > 0 And dr("option_pos").ToString <> "" Then
                position = CInt(dr("option_pos") / call_length * 100)
            End If

            div_response &= " <div class='warning-part' style='left: " & position & "%;' title='" & dr("option_value").ToString & "'><span></span><a onclick='jumpPos(" & dr("option_pos") & ");' class='listen-from-here' style='cursor: pointer;background: none repeat scroll 0% 0% rgb(102,178,255);'>&#x2724</a></div>" & Chr(13)

        Next

        stats_dt = GetTable("select comment_pos, comment_header from system_comments with (nolock) where comment_id = " & form_id)
        'each template answer
        For Each dr In stats_dt.Rows
            Dim position As Integer = 0




            If call_length > 0 And dr("comment_pos").ToString <> "" Then

                Dim comment_times() As String = dr("comment_pos").ToString.Split(":")
                position = CInt((comment_times(0) * 60 + comment_times(1)) / call_length * 100)
                div_response &= "<div class='warning-part' style='left: " & position & "%;' title='" & dr.Item("comment_header").ToString & "'><span></span><a onclick='jumpPos(" & (comment_times(0) * 60 + comment_times(1)) & ");' class='listen-from-here' style='cursor: pointer;background: none repeat scroll 0% 0% rgb(102,178,255);'>&#x2724</a></div>" & Chr(13)
            End If



        Next

        Return div_response

    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetFormQuestions(form_id As String) As List(Of DBOptions)
        Dim mi_items As New List(Of DBOptions)

        Dim q_list As DataTable = GetTable("select q_short_name, question_id from form_q_scores with (nolock) join questions with (nolock) on questions.id = form_q_scores.question_ID join sections with (nolock) on sections.id = questions.section where form_id = " & form_id & " order by section_order, q_order")
        For Each dr In q_list.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("q_short_name").ToString
            _mi.value = dr("question_id").ToString

            mi_items.Add(_mi)

        Next
        Return mi_items
    End Function
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetMyScorecards() As List(Of DBOptions)
        Dim mi_items As New List(Of DBOptions)

        Dim q_list As DataTable = GetTable("select short_name, scorecards.id from scorecards with (nolock) join userapps with (nolock) on userapps.user_scorecard = scorecards.id where username = '" & HttpContext.Current.User.Identity.Name & "' order by short_name")
        For Each dr In q_list.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("short_name").ToString
            _mi.value = dr("id").ToString

            mi_items.Add(_mi)

        Next
        Return mi_items
    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetMyQuestions(start_date As String, end_date As String) As List(Of DBOptions)
        Dim mi_items As New List(Of DBOptions)

        Dim q_list As DataTable = GetTable("exec getMyQuestions '" & HttpContext.Current.User.Identity.Name & "', '" & start_date & "', '" & end_date & "'")
        For Each dr In q_list.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("q_display").ToString
            _mi.value = dr("id").ToString

            mi_items.Add(_mi)

        Next
        Return mi_items
    End Function



    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetGroups(start_date As String, end_date As String, scorecard As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"

        Dim my_group As String = ""

        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable
        If scorecard = "" Then
            scorecard = " in (select user_scorecard from userapps with (nolock)  join app_settings with (nolock) on app_settings.appname = userapps.appname join scorecards with (nolock)  on scorecards.ID= userapps.user_scorecard where username =  '" & HttpContext.Current.User.Identity.Name & "' and scorecards.active=1 and app_settings.active = 1) "
        Else
            scorecard = " = '" & scorecard & "' "
        End If

        Dim sup_test As DataTable = GetTable("select user_group,user_role from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        If sup_test.Rows.Count > 0 Then
            If sup_test.Rows(0).Item("user_role") = "supervisor" And sup_test.Rows(0).Item("user_group").ToString <> "" Then
                scorecard = scorecard & " and agent_group = '" & sup_test.Rows(0).Item("user_group").ToString & "' "
                my_group = sup_test.Rows(0).Item("user_group").ToString
            End If
        End If


            If HttpContext.Current.User.IsInRole("Agent") Then
            scorecard &= " and agent ='" & HttpContext.Current.User.Identity.Name & "' "
        End If

        Dim user_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'")

        stats_dt = GetTable("SELECT distinct agent_group FROM [XCC_REPORT_NEW]  with (nolock) where scorecard " & scorecard & " and call_date >= '" & start_date & "' and call_date <= '" & end_date & "'  " & Replace(Replace(user_dt.Rows(0).Item("special_filter").ToString, "''", "'"), "vwform", "xcc_report_new") & " order by agent_group")




        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("agent_group").ToString
            _mi.value = dr("agent_group").ToString

            If my_group = dr("agent_group").ToString Then
                _mi.selected = "selected"
            Else
                _mi.selected = ""
            End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetAgents(start_date As String, end_date As String, scorecard As String, group As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim sup_test As DataTable = GetTable("select user_group,user_role from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        If sup_test.Rows.Count > 0 Then
            If sup_test.Rows(0).Item("user_role") = "supervisor" And sup_test.Rows(0).Item("user_group").ToString <> "" Then
                group = sup_test.Rows(0).Item("user_group").ToString
            End If
        End If



        Dim mi_items As New List(Of DBOptions)

        Dim filter As String = ""

        If group <> "" Then
            filter &= " and agent_group ='" & Replace(group, "'", "''") & "' "
        End If

        If scorecard <> "" Then
            filter &= " and scorecard ='" & scorecard & "' "
        End If


        If HttpContext.Current.User.IsInRole("Agent") Then
            filter &= " and agent ='" & HttpContext.Current.User.Identity.Name & "' "
        End If

        Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        Dim stats_dt As DataTable

        stats_dt = GetTable("SELECT distinct AGent FROM [XCC_REPORT_NEW]  with (nolock) where scorecard in (select user_scorecard from userapps with (nolock) where username =  '" & HttpContext.Current.User.Identity.Name & "') " & filter & " and agent is not null and agent != '' and call_date >= '" & start_date & "' and call_date <= '" & end_date & "'  " & Replace(Replace(user_dt.Rows(0).Item("special_filter").ToString, "''", "'"), "vwform", "xcc_report_new") & "  order by AGent")

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("AGent").ToString
            _mi.value = dr("AGent").ToString

            If HttpContext.Current.Session("Agent") = dr("Agent").ToString Then
                _mi.selected = "selected"
            Else
                _mi.selected = ""
            End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function
    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetAppnames(filter As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable
        'stats_dt = GetTable("SELECT distinct appname + ' (' + short_name + ')' as scorecard,scorecards.ID    from userapps join scorecards on userapps.appname = scorecards.appname join app_settings on app_settings.appname = userapps.appname where username = '" & HttpContext.Current.User.Identity.Name & "' and app_settings.active = 1 and scorecards.active = 1 order by appname")
        stats_dt = GetTable("SELECT distinct scorecards.appname + ' (' + short_name + ')' as scorecard,scorecards.ID  from vwForm with (nolock) join scorecards with (nolock) on vwForm.scorecard = scorecards.id join  userapps   with (nolock) on userapps.user_scorecard = scorecards.id join userextrainfo with (nolock) on userextrainfo.username = vwForm.reviewer join app_settings with (nolock) on app_settings.appname = userapps.appname where userapps.username = '" & HttpContext.Current.User.Identity.Name & "' and app_settings.active = 1 and scorecards.active = 1 " & filter & " order by scorecards.appname + ' (' + short_name + ')'")

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("scorecard").ToString
            _mi.value = dr("ID").ToString

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetSCStats(scorecard As String, start_date As String, end_date As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable
        'stats_dt = GetTable("SELECT distinct appname + ' (' + short_name + ')' as scorecard,scorecards.ID    from userapps join scorecards on userapps.appname = scorecards.appname join app_settings on app_settings.appname = userapps.appname where username = '" & HttpContext.Current.User.Identity.Name & "' and app_settings.active = 1 and scorecards.active = 1 order by appname")
        stats_dt = GetTable("exec GetSCStats " & scorecard & ",'" & start_date & "','" & end_date & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("comment").ToString
            _mi.value = dr("num_objections").ToString

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function



    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetCampaigns(start_date As String, end_date As String, scorecard As String, group As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)

        Dim filter As String = ""

        If group <> "" Then
            filter &= " and agent_group ='" & group & "' "
        End If

        If scorecard <> "" Then
            filter &= " and scorecard ='" & scorecard & "' "
        End If

        If HttpContext.Current.User.IsInRole("Agent") Then
            filter &= " and agent ='" & HttpContext.Current.User.Identity.Name & "' "
        End If



        Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")




        Dim stats_dt As DataTable
        stats_dt = GetTable("SELECT distinct Campaign FROM [XCC_REPORT_NEW]  with (nolock) where  scorecard in (select user_scorecard from userapps with (nolock) where username =  '" & HttpContext.Current.User.Identity.Name & "') " & filter & " and call_date >= '" & start_date & "' and call_date <= '" & end_date & "' " & Replace(Replace(user_dt.Rows(0).Item("special_filter").ToString, "''", "'"), "vwform", "xcc_report_new") & " and campaign is not null  order by campaign")

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("Campaign").ToString
            _mi.value = dr("Campaign").ToString

            If HttpContext.Current.Session("Campaign") = dr("Campaign").ToString Then
                _mi.selected = "selected"
            Else
                _mi.selected = ""
            End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function

    '<OperationContract()>
    '<WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    'Public Function GetQuestions(appname As String) As List(Of DBOptions)

    '    'start_date = "1/1/2015"
    '    'end_date = "3/1/2015"
    '    'appname = "edsoup"
    '    'group = "Edsoup"


    '    Dim mi_items As New List(Of DBOptions)


    '    Dim stats_dt As DataTable
    '    stats_dt = GetTable("SELECT id, q_short_name from questions where appname in ('" & appname.Replace("|", "','") & "')  and active = 1 order by q_short_name")

    '    For Each dr In stats_dt.Rows
    '        Dim _mi As New DBOptions
    '        _mi.text = dr("q_short_name").ToString
    '        _mi.value = dr("id").ToString

    '        mi_items.Add(_mi)

    '    Next


    '    Return mi_items

    'End Function

    ' Add more operations here and mark them with <OperationContract()>

    Public Class Stats
        Public CallsReviewed As String
        Public CRCallDifference As String
        Public CRDirection As String

        Public CallsFailed As String
        Public CFDifference As String
        Public CFDirection As String

        Public NumMinutes As String
        Public NMDifference As String
        Public NMDirection As String

        Public NumAgents As String
        Public NADifference As String
        Public NADirection As String

    End Class


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetDetailCount(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As String


        'start_date = "2/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""
        'pagenum = 3


        Dim dt As DataTable

        dt = GetTable("getDetailDataCount '" & HttpContext.Current.User.Identity.Name & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & filter_array & "'")



        Return dt.Rows(0).Item(0).ToString


    End Function



    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetDetails(start_date As String, end_date As String, hdnAgentFilter As String, Optional pagenum As String = "1", Optional pagerows As String = "50",
                               Optional Sort_statement As String = "", Optional rowstart As String = "0", Optional rowend As String = "0", Optional filter_array As String = "") As String


        'start_date = "2/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'hdnAgentFilter = ""
        'pagenum = 3


        Dim gvQADetails As New GridView
        gvQADetails.AutoGenerateColumns = False

        AddHandler gvQADetails.RowCreated, AddressOf GridView1_RowCreated
        AddHandler gvQADetails.RowDataBound, AddressOf gvQADetails_RowDataBound

        Dim called_sp As String = "getDetailData"

        If filter_array <> "" Then
            called_sp = "getDetailDataArray"
        End If


        addField(gvQADetails, "CALL ID")
        Dim user_col_count_dt As DataTable = GetTable("select * from available_columns with (nolock) join user_columns with (nolock) on user_columns.column_id = available_columns.id where username = '" & HttpContext.Current.User.Identity.Name & "' order by col_order")
        If user_col_count_dt.Rows.Count = 0 Then

            addField(gvQADetails, "RESULT")

            addField(gvQADetails, "COMMENTS")
            'If hdnAgentFilter.IndexOf("Agent") = -1 Then
            addField(gvQADetails, "AGENT")
            'End If
            addField(gvQADetails, "CAMPAIGN")
            addField(gvQADetails, "REVIEW DATE")
            addField(gvQADetails, "PHONE")
            addField(gvQADetails, "CALL DATE")
            addField(gvQADetails, "CALL LENGTH")
            addField(gvQADetails, "SCORE")
            addField(gvQADetails, "# MISSED")
            addField(gvQADetails, "MISSED ITEMS")
            addField(gvQADetails, "Session ID")
            If HttpContext.Current.User.IsInRole("Admin") Or HttpContext.Current.User.IsInRole("QA Lead") Then
                addField(gvQADetails, "Efficiency")
            End If



        Else
            For Each dr As DataRow In user_col_count_dt.Rows
                If dr("Column_required").ToString = "False" Or dr("Column_required").ToString = "" Then
                    addField(gvQADetails, dr("Column_name").ToString.Replace("[", "").Replace("]", ""))
                End If
            Next

            called_sp = "getDetailDataCustom"

        End If
        'addField(gvQADetails, "website")






        gvQADetails.UseAccessibleHeader = False

        'gvQADetails.AllowSorting = True
        'gvQADetails.ShowFooter = True

        Dim this_user As String = HttpContext.Current.User.Identity.Name


        If Sort_statement = "undefined" Or Trim(Sort_statement) = "order by [] desc" Then
            Sort_statement = ""
        End If


        Dim myRole As String = ""
        Dim user_roles() As String = Roles.GetRolesForUser(this_user)
        For Each role In user_roles
            myRole = role
        Next


        If hdnAgentFilter.IndexOf("and vwform.agent =") > -1 And HttpContext.Current.User.Identity.Name.ToLower = "agent" Then

            ' and vwform.agent = 'Nyla Sophas' *
            'Dim agent As String = hdnAgentFilter.Substring(21, hdnAgentFilter.Substring(22).IndexOf("'") + 1)
            'Email_Error(agent)
            this_user = "agent"
            myRole = "Agent"

        End If


        Dim dt As DataTable



        If pagenum = 0 Or pagenum = -1 Then
            If pagenum = 0 Then
                dt = GetTable(called_sp & " '" & this_user & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & this_user & "','" & myRole & "','1','1','" & Sort_statement & "','" & rowstart & "','" & rowend & "'")

            Else
                dt = GetTable(called_sp & " '" & this_user & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & this_user & "','" & myRole & "','" & 1 & "','10000','" & Sort_statement & "','" & rowstart & "','" & rowend & "'")
            End If

        Else

            If filter_array <> "" Then
                dt = GetTable(called_sp & " '" & this_user & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & this_user & "','" & myRole & "','" & pagenum & "','" & pagerows & "','" & Sort_statement & "','" & rowstart & "','" & rowend & "','" & filter_array & "'")
            Else
                dt = GetTable(called_sp & " '" & this_user & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & this_user & "','" & myRole & "','" & pagenum & "','" & pagerows & "','" & Sort_statement & "','" & rowstart & "','" & rowend & "'")
            End If



        End If

        'dt = GetTable("getDetailData '" & appname & "','" & start_date & "','" & end_date & "','" & Replace(hdnAgentFilter, "'", "''") & "','" & pagenum & "','20'")




        gvQADetails.DataSource = dt
        gvQADetails.DataBind()




        'For x = 0 To gvQADetails.Columns.Count - 1
        '    If cols_with_data(x) = 0 Then
        '        gvQADetails.Columns(x).Visible = False
        '    End If
        'Next

        Dim sw As New StringWriter()
        Dim hw As New HtmlTextWriter(sw)


        If pagenum = 0 Or pagenum = -1 Then

            'If gvQADetails.Rows.Count > 0 Then

            Try
                gvQADetails.HeaderRow.TableSection = TableRowSection.TableHeader
                gvQADetails.HeaderRow.RenderControl(hw)
            Catch ex As Exception

            End Try

            If pagenum = -1 Then
                For Each gvr As GridViewRow In gvQADetails.Rows
                    gvr.RenderControl(hw)
                Next
            End If
        Else
            For Each gvr As GridViewRow In gvQADetails.Rows
                gvr.RenderControl(hw)
            Next
        End If

        'If pagenum = 0 Or pagenum = -1 Then

        '    Return sw.ToString().Replace("&lt;i class=&quot;fa fa-times&quot; style=&quot;color:red&quot;&gt;&lt;/i&gt;", "")
        'Else
        '    Return sw.ToString().Replace("&lt;i class=&quot;fa fa-times&quot; style=&quot;color:red&quot;&gt;&lt;/i&gt;", "")
        'End If

        Return sw.ToString()


    End Function

    'Protected Sub gvQADetails_PreRender(ByRef gvQADetails As GridView)
    '    If gvQADetails.HeaderRow IsNot Nothing Then
    '        gvQADetails.HeaderRow.TableSection = TableRowSection.TableHeader
    '    End If

    'End Sub

    'Protected Sub getPageNums(ByRef gvQADetails As GridView)
    '    Dim bl As BulletedList = DirectCast(gvQADetails, BulletedList)
    '    Dim numPages As Integer = gvQADetails.PageSize

    '    If bl.Items.Count = 0 Then
    '        For i As Integer = 1 To numPages
    '            bl.Items.Add(New ListItem(("" & i), ("Page$" & i)))
    '            bl.Items(i - 1).Enabled = Not (gvQADetails.PageIndex = (i - 1))
    '        Next
    '    End If
    'End Sub


    Protected Sub GridView1_RowCreated(sender As Object, e As GridViewRowEventArgs) 'Handles gvQADetails.RowCreated
        Dim gvQADetails As GridView = sender
        If e.Row.RowType = DataControlRowType.Pager Then
            Dim bl As New BulletedList
            bl.CssClass = "table-navigation"

            Dim index As Integer
            For index = 1 To gvQADetails.PageCount

                If index = gvQADetails.PageIndex + 1 Then
                    Dim li As New ListItem
                    li.Text = index.ToString
                    li.Attributes.Add("class", "selected-page")
                    Dim lbl As New Label()
                    lbl.Text = "<span style=""color:red;""> </span> <b style=""background-color: Silver;color:red;border-style:solid;border-color:silver;border-width:2px;padding:2px 2px 2px 2px"">" & index.ToString() & "</b> "
                    e.Row.Cells(0).Controls.Add(lbl)
                    bl.Items.Add(li)

                Else

                    Dim li As New ListItem
                    li.Text = index.ToString

                    Dim linkbutton As New LinkButton()
                    linkbutton.ID = "LinkPage" & index
                    linkbutton.CommandName = "Page"
                    linkbutton.CommandArgument = index.ToString()
                    linkbutton.Text = index.ToString()
                    linkbutton.CssClass = "link"
                    Dim sw As New StringWriter()
                    Dim hw As New HtmlTextWriter(sw)

                    linkbutton.RenderControl(hw)
                    li.Text = sw.ToString.Replace("&lt;", "<").Replace("&gt;", ">")
                    bl.Items.Add(li)

                End If

            Next
            e.Row.Cells(0).Controls.Add(bl)
        End If

    End Sub

    Dim comment_header As Integer = 0
    Dim missed_list_header As Integer = 0
    Dim call_id_header As Integer = 0
    Dim call_result_header As Integer = 0

    Dim cols_with_data() As Integer

    Protected Sub gvQADetails_RowDataBound(sender As Object, e As GridViewRowEventArgs) 'Handles gvQADetails.RowDataBound
        If e.Row.RowType = DataControlRowType.Header Then
            Dim cell_count As Integer = 0
            For x = 0 To e.Row.Cells.Count - 1
                If e.Row.Cells(x).Text = "COMMENTS" Then
                    comment_header = x
                End If
                If e.Row.Cells(x).Text = "MISSED ITEMS" Then
                    missed_list_header = x
                End If

                If e.Row.Cells(x).Text = "CALL ID" Then
                    call_id_header = x
                End If

                If e.Row.Cells(x).Text = "RESULT" Then
                    call_result_header = x
                End If




            Next

            ReDim cols_with_data(e.Row.Cells.Count)
        End If

        If e.Row.RowType = DataControlRowType.DataRow Then


            For x = 0 To e.Row.Cells.Count - 1
                If e.Row.Cells(x).Text <> "&nbsp;" Then
                    cols_with_data(x) = cols_with_data(x) + 1
                End If
            Next


            Dim isCalib As Boolean = False
            Dim isedited As Boolean = False

            Dim sort_class As String = ""
            If e.Row.DataItem("play_btn_class").ToString <> "" Then
                isCalib = True
                sort_class &= "calib"
            End If

            If e.Row.DataItem("wasEdited").ToString <> "" Then
                isedited = True
                sort_class &= "edit"
            End If



            If sort_class <> "" Then
                e.Row.Cells(call_id_header).Attributes.Add("data-text", sort_class)
            End If


            Try

                If e.Row.DataItem("Result").ToString = "Pass" Then
                    e.Row.Cells(call_result_header).Text = "<span class='final-result'>PASS <i class='fa fa-check'></i></span>"
                End If

                If e.Row.DataItem("Result").ToString = "N/A" Then
                    e.Row.Cells(call_result_header).Text = "<span class='final-result' title='" & e.Row.DataItem("bad_call_reason").ToString & "' style='color:darkgray'>N/A &nbsp;&nbsp;<i class='fa fa-question-circle'></i></span>"
                End If

                If e.Row.DataItem("Result").ToString = "Fail" Then
                    e.Row.Cells(call_result_header).Text = "<span class='final-result' " & sort_class & ">FAIL <i class='fa fa-times'></i></span>"
                    e.Row.Attributes.Add("class", "fail-row")
                End If
            Catch ex As Exception

            End Try





            If e.Row.Cells(comment_header).Text <> "&nbsp;" And Trim(e.Row.Cells(comment_header).Text) <> "-" Then
                e.Row.Cells(comment_header).Attributes.Add("class", "popup-comments")
                Dim comments() As String = e.Row.Cells(comment_header).Text.Split("|")
                If comments.Length > 1 Then
                    e.Row.Cells(comment_header).Text = ""
                    Dim comment_id As Integer = 1
                    For Each comment In comments
                        If Trim(comment) <> "" Then
                            e.Row.Cells(comment_header).Text &= "<i class='fa fa-file comment" & comment_id & "'></i><span style='white-space: normal;'>" & Trim(comment.Replace("&lt;br&gt;", "<br>")) & "</span>"
                        End If
                        comment_id += 1
                    Next

                    'e.Row.Cells(comment_header).Text = "<i class='fa fa-file' onclick='$(""#add-report-popup"").show();'></i><span>" & Trim(comments(0).Replace("&lt;br&gt;", "<br>")) & "</span>"
                    'e.Row.Cells(comment_header).Text &= "<i class='fa fa-file' onclick='$(""#add-report-popup"").show();'></i><span>" & Trim(comments(1).Replace("&lt;br&gt;", "<br>")) & "</span>"
                Else
                    e.Row.Cells(comment_header).Text = "<i class='fa fa-file comment1'></i><span style='white-space: normal;'>" & Trim(e.Row.Cells(comment_header).Text.Replace("&lt;br&gt;", "<br>")) & "</span>"
                End If
            End If

            Dim noti_owned As String = "1"
            If e.Row.DataItem("non_edit").ToString = "1" Then
                noti_owned = "0"
            End If


            If e.Row.DataItem("NotificationID").ToString <> "" And e.Row.DataItem("Notificationstep").ToString <> "" Then
                e.Row.Cells(comment_header).Text &= " <img class='noti-click yellow-ex-mark noti-click" & e.Row.DataItem("OwnedNotification").ToString & "' src='img/yellow_exclamation.png' alt='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' title='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' data-notiid='" & e.Row.DataItem("NotificationID").ToString & "' data-formid='" & e.Row.DataItem("Call ID").ToString & "' data-notiowned='" & noti_owned & "' data-notistep='" & e.Row.DataItem("Notificationstep").ToString & "' data-phone='" & e.Row.DataItem("phone").ToString & "' onclick='pop_notification($(this).attr(""data-notiid""),$(this).attr(""data-notistep""),"""",""" & e.Row.DataItem("Call ID").ToString & """);'>"
            Else

                If HttpContext.Current.User.IsInRole("Client") Or HttpContext.Current.User.IsInRole("Supervisor") Or HttpContext.Current.User.IsInRole("Admin") Then
                    e.Row.Cells(comment_header).Text &= " <img class='noti-click yellow-ex-mark' src='img/yellow-plus.PNG' alt='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' title='Create Notification' data-source='callDetails' data-notiid='0' data-formid='" & e.Row.DataItem("Call ID").ToString & "' data-notiowned='" & noti_owned & "' data-notistep='Supervisor' data-phone='" & e.Row.DataItem("phone").ToString & "' onclick='pop_notification($(this).attr(""data-notiid""),$(this).attr(""data-notistep""),"""",""" & e.Row.DataItem("Call ID").ToString & """);'>"
                End If


                Try
                    If HttpContext.Current.User.IsInRole("Agent") And e.Row.DataItem("agent").ToString = HttpContext.Current.User.Identity.Name Then
                        e.Row.Cells(comment_header).Text &= " <img class='noti-click yellow-ex-mark' src='img/yellow-plus.PNG' alt='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' title='Create Notification' data-source='callDetails' data-notiid='0' data-formid='" & e.Row.DataItem("Call ID").ToString & "' data-notiowned='" & noti_owned & "' data-notistep='Agent' data-phone='" & e.Row.DataItem("phone").ToString & "' onclick='pop_notification($(this).attr(""data-notiid""),$(this).attr(""data-notistep""),"""",""" & e.Row.DataItem("Call ID").ToString & """);'>"
                    End If
                Catch ex As Exception

                End Try



            End If

            'If e.Row.DataItem("AgentNotificationID").ToString <> "" And e.Row.DataItem("Notificationstep").ToString <> "" Then
            '    e.Row.Cells(comment_header).Text &= " <img class='yellow-ex-mark' src='img/yellow_exclamation.png' class='noti-click' alt='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' title='Open " & e.Row.DataItem("Notificationstep").ToString & " Notification' data-notiid='" & e.Row.DataItem("AgentNotificationID").ToString & "' data-notistep='" & e.Row.DataItem("Notificationstep").ToString & "' data-phone='" & e.Row.DataItem("phone").ToString & "' onclick='pop_notification(""" & e.Row.DataItem("AgentNotificationID").ToString & """,""" & e.Row.DataItem("Notificationstep").ToString & """);'>"
            'End If


            Dim drv As DataRowView = e.Row.DataItem

            ' If call_id_header <> 0 Then
            'If HttpContext.Current.Request("Agent") <> "" Then
            '    e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & drv.Item("call id").ToString & "&agent=" & HttpContext.Current.Request("Agent") & "'><button type='button'><div></div></button></a>"
            'Else
            '    e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & drv.Item("call id").ToString & "'><button type='button'><div></div></button></a>"
            'End If




            If e.Row.DataItem("play_btn_class").ToString = "" Then
                e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & e.Row.DataItem("call id").ToString & "' target='_blank'><button type='button'><div></div></button></a>"
            Else
                'If HttpContext.Current.User.IsInRole("Agent") Then
                e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & e.Row.DataItem("call id").ToString & "' target='_blank'><button type='button'  class='cali_class' title='Calibrated Call'><div></div></button></a>"
                'Else
                'e.Row.Cells(call_id_header).Text = "<a href='review_calib_record.aspx?ID=" & e.Row.DataItem("call id").ToString & "' target='_blank'><button type='button' class='cali_class' title='Calibrated Call'><div></div></button></a>"
                'End If


            End If


            If e.Row.DataItem("wasEdited").ToString = "True" And e.Row.DataItem("play_btn_class").ToString = "" Then

                e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & e.Row.DataItem("call id").ToString & "' target='_blank'><button type='button' class='edit_class'  title='Edited Call'><div></div></button></a>"
            End If

            If e.Row.DataItem("website").ToString <> "" Then
                e.Row.Cells(call_id_header).Text = "<a href='review_record.aspx?ID=" & e.Row.DataItem("call id").ToString & "'  target='_blank'><button type='button' class='website_class'  title='Website Call'><div></div></button></a>"
            End If



            e.Row.Cells(call_id_header).Attributes.Add("class", "playBtn")
            'End If


            'If Len(e.Row.Cells(missed_list_header).Text) > 1 Then
            '    Dim replacement_text As String = ""
            '    Dim mq_list() As String = e.Row.Cells(missed_list_header).Text.Split(",")
            '    For Each mq As String In mq_list

            '        Dim q_pos As DataTable = GetTable("select case when q_position > call_length then call_length - 100 else q_position end as q_position, audio_link, " &
            '            "vwForm.F_id as form_id from vwForm join  form_q_scores on vwForm.F_id= form_q_scores.form_id " &
            '            "join Questions on questions.id = form_q_scores.question_id  " &
            '            "where vwForm.F_id = " & drv.Item("call id").ToString & " and q_short_name='" & Trim(mq) & "'")

            '        If q_pos.Rows.Count > 0 Then
            '            If replacement_text <> "" Then
            '                replacement_text &= ", <a href='javascript:show_audio(" & Chr(34) & q_pos.Rows(0).Item("audio_link").ToString & Chr(34) & "," & Chr(34) & q_pos.Rows(0).Item("q_position").ToString & Chr(34) & "," & Chr(34) & q_pos.Rows(0).Item("form_id").ToString & Chr(34) & ");'>" & mq & "</a>"
            '            Else
            '                replacement_text &= "<a href='javascript:show_audio(" & Chr(34) & q_pos.Rows(0).Item("audio_link").ToString & Chr(34) & "," & Chr(34) & q_pos.Rows(0).Item("q_position").ToString & Chr(34) & "," & Chr(34) & q_pos.Rows(0).Item("form_id").ToString & Chr(34) & ");'>" & mq & "</a>"
            '            End If
            '        End If
            '    Next
            '    e.Row.Cells(missed_list_header).Text = replacement_text
            'End If

        End If
        'If e.Row.RowType = DataControlRowType.Footer Then
        '    Dim 
        '    e.Row.Cells(0).Controls.Add()
        'End If


    End Sub


    Protected Sub addField(ByRef gvQADetails As GridView, fieldname As String)
        Dim bfield = New BoundField()
        bfield.HeaderText = fieldname
        bfield.DataField = fieldname
        bfield.ItemStyle.HorizontalAlign = HorizontalAlign.Left
        bfield.HtmlEncode = False
        gvQADetails.Columns.Add(bfield)

    End Sub


    <OperationContract()>
    Public Sub UpdateUserEmail(username As String, oldemail As String, newemail As String)

        If username = "" Or newemail = "" Then Exit Sub

        Dim sql As String
        sql = "UPDATE UserExtraInfo SET email_address = '" & newemail & "' WHERE username = '" & username & "'"
        Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
        cn.Open()

        Dim query As New SqlCommand(sql, cn)
        query.CommandTimeout = 60
        query.ExecuteNonQuery()
        cn.Close()
        cn.Dispose()

    End Sub


    <OperationContract()>
    Public Sub UpdateUserActive(username As String, isActive As String)

        If username = "" Or isActive = "" Then Exit Sub

        Dim isLockedOut As Integer = 0
        Dim roleFilter As String = ""
        Dim dt As DataTable = GetTable("SELECT user_role FROM UserExtraInfo with (nolock) WHERE username = '" & username & "'")
        If isActive = "true" Then
            If Trim(dt.Rows(0).Item(0).ToString) = "Inactive" Then
                roleFilter = ", user_role = 'QA' "
                If Roles.GetRolesForUser(username).Count > 0 Then
                    Roles.RemoveUserFromRoles(username, Roles.GetRolesForUser(username))
                End If
                Roles.AddUserToRole(username, "QA")
            End If
            isActive = 1
        Else
            If Trim(dt.Rows(0).Item(0).ToString) = "QA" Then
                roleFilter = ", user_role = 'Inactive' "
                If Roles.GetRolesForUser(username).Count > 0 Then
                    Roles.RemoveUserFromRoles(username, Roles.GetRolesForUser(username))
                End If
                Roles.AddUserToRole(username, "Inactive")
            End If
            isActive = 0
            isLockedOut = 1
        End If

        Dim sql As String
        sql = "UPDATE UserExtraInfo SET active = '" & isActive & "'" & roleFilter & " WHERE username = '" & username & "'"
        Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
        cn.Open()

        Dim query As New SqlCommand(sql, cn)
        query.CommandTimeout = 60
        query.ExecuteNonQuery()

        'update [aspnet_Membership] set islockedout = 0 where userid in (select userID from  [aspnet_Users] where username  = 'carlo')
        sql = "UPDATE [aspnet_Membership] SET islockedout = '" & isLockedOut & "' WHERE userid in (select userID from  [aspnet_Users] with (nolock) where username = '" & username & "')"
        Dim query2 As New SqlCommand(sql, cn)
        query2.CommandTimeout = 60
        query2.ExecuteNonQuery()

        If Trim(dt.Rows(0).Item(0).ToString) = "QA" And isActive = 0 Then
            sql = "DELETE FROM UserApps WHERE username = '" & username & "'"
            Dim query3 As New SqlCommand(sql, cn)
            query3.CommandTimeout = 60
            query3.ExecuteNonQuery()
        End If

        cn.Close()
        cn.Dispose()

    End Sub


    <OperationContract()>
    Public Sub UpdateBadCallNotes(session_id As String, notes As String)

        If session_id = "" Then Exit Sub

        Dim sql As String
        sql = "UPDATE xcc_report_new SET Notes = '" & notes & "' WHERE SESSION_ID = '" & session_id & "'"
        Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
        cn.Open()

        Dim query As New SqlCommand(sql, cn)
        query.CommandTimeout = 60
        query.ExecuteNonQuery()

        cn.Close()
        cn.Dispose()

    End Sub
    <OperationContract()>
    Public Function AcceptBadCall(form_id As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        UpdateTable("update xcc_report_new set bad_call_accepted = 1, bad_call_accepted_who = '" & HttpContext.Current.User.Identity.Name & "' where id = " & form_id)

        Return "Updated."

    End Function

    <OperationContract()>
    Public Function ResetBadCall(form_id As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        UpdateTable("exec resetcall " & form_id)

        Return "Updated."

    End Function


    <OperationContract()>
    Public Function getMyMissingCalls(short_name As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        Dim sql As String = "select *, xcc_report_new.id as x_id from xcc_report_new  with (nolock) join scorecards with (nolock) on scorecards.id = xcc_report_new.scorecard join userapps with (nolock) on userapps.appname= xcc_report_new.appname where audio_link is null and scorecards.short_name = '" & short_name & "' and username = '" & HttpContext.Current.User.Identity.Name & "'"

        Dim calls_left As DataTable = GetTable(sql)
        Dim json As String = "["

        For Each dr In calls_left.Rows
            json &= "{""id"":""" & dr("x_id") & """,""call_date"":""" & dr("call_date") & """,""phone"":""" & dr("phone") & """,""agent_group"":""" & dr("agent_group") & """,""agent"":""" & dr("agent") & """},"
        Next

        If Right(json, 1) = "," Then
            json = Left(json, Len(json) - 1)
        End If

        json &= "]"

        Return json

    End Function



    <OperationContract()>
    Public Function deleteMissingCalls(id As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        UpdateTable("delete from xcc_report_new where id  =" & id)

        Return ""

    End Function




    <OperationContract()>
    Public Function getMyBadCalls(short_name As String, date_start As String, date_end As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        Dim sql As String = "select *, xcc_report_new.id as x_id from xcc_report_new with (nolock)  join scorecards with (nolock) on scorecards.id = xcc_report_new.scorecard join userapps with (nolock) on userapps.user_scorecard= xcc_report_new.scorecard where bad_call is not null and call_date between '" & date_start & "' and '" & date_end & "' and scorecards.short_name = '" & short_name & "' and bad_call_accepted is null and username = '" & HttpContext.Current.User.Identity.Name & "'"

        Dim calls_left As DataTable = GetTable(sql)
        Dim json As String = "["

        For Each dr In calls_left.Rows
            json &= "{""id"":""" & dr("x_id") & """,""call_date"":""" & dr("call_date") & """,""phone"":""" & dr("phone") & """,""bad_call_reason"":""" & dr("bad_call_reason") & """,""audio_link"":""" & dr("audio_link") & """},"
        Next

        If Right(json, 1) = "," Then
            json = Left(json, Len(json) - 1)
        End If

        json &= "]"

        Return json

    End Function
    <OperationContract()>
    Public Function getWebsiteStats(date_start As String, date_end As String) As String
        Dim dt As DataTable = GetTable("exec getWebsiteStats '" & date_start & "','" & date_end & "', '" & HttpContext.Current.User.Identity.Name & "'")

        Dim resp As String = "<tr style='font-weight:bold'><td colspan=2>General Stats</td></tr>"
        If dt.Rows.Count > 0 Then
            resp &= "<tr><td>Compliant</td><td>" & dt.Rows(0).Item("pass_percent") & "%</td></tr>"
            resp &= "<tr><td>Non-compliant</td><td>" & dt.Rows(0).Item("failed_percent") & "%</td></tr>"
            resp &= "<tr><td>Bad</td><td>" & dt.Rows(0).Item("bad_percent") & "%</td></tr>"
        End If


        Dim user_special_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'")

        If user_special_dt.Rows(0).Item("special_filter").ToString <> "" Then
            dt = GetTable("select count(*) as total, sum(max_reviews) as completed, sum(case when pass_fail = 'Pass' then 1 else 0 end) as passed, sum(case when max_reviews = 0 then 1 else 0 end) as pending, campaign, Agent  from vwform with (nolock)  where scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "') " & user_special_dt.Rows(0).Item("special_filter").ToString & " and date_added between '" & date_start & "' and '" & date_end & "' and website is not null group by campaign, agent")
        Else
            dt = GetTable("select count(*) as total, sum(max_reviews) as completed, sum(case when pass_fail = 'Pass' then 1 else 0 end) as passed, sum(case when max_reviews = 0 then 1 else 0 end) as pending, campaign, Agent  from vwform  with (nolock) where scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "') and date_added between '" & date_start & "' and '" & date_end & "' and website is not null group by campaign, agent")
        End If


        If dt.Rows.Count > 0 Then
            resp &= "<tr style='font-weight:bold'><td>Partner</td><td>Campaign</td><td>Total</td><td>Done</td><td>Compliant</td><td>Pend</td></tr>"
        End If
        For Each dr As DataRow In dt.Rows
            resp &= "<tr><td>" & dr("agent").ToString & "</td><td>" & dr("Campaign").ToString & "</td><td>" & dr.Item("total").ToString & "</td><td>" & dr.Item("Completed").ToString & "</td><td>" & dr.Item("passed").ToString & "</td><td>" & dr.Item("pending").ToString & "</td></tr>"
        Next

        Return resp

    End Function


    <OperationContract()>
    Public Function AddSpotcheck(date_start As String, date_end As String, filter As String, count As String, assigned_to As String) As String
        Dim sql_range As String = ""
        If count <> "0" Then
            sql_range = " top " & count & " "
        End If

        If assigned_to = "" Or assigned_to = "Me" Then
            assigned_to = HttpContext.Current.User.Identity.Name
        End If

        UpdateTable("insert into spotcheck (f_id, assigned_to) select " & sql_range & " f_id, '" & assigned_to & "' from vwform with (nolock) where call_date between '" & date_start & "' and '" & date_end & "' " & filter & " and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "') order by f_id desc")


        Return "Done."

    End Function



    <OperationContract()>
    Public Function GetCallsLeft(date_start As String, date_end As String) As String
        'Dim calls_left As DataTable = GetTable("select count(*) as calls, b.appname from dbo.XCC_REPORT_NEW b  with (nolock)  where b.scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and MAX_REVIEWS = 0 and audio_link is not null group by b.appname")

        Dim sql As String = "exec getCallList '" & HttpContext.Current.User.Identity.Name & "','" & date_start & "','" & date_end & "'"

        Dim calls_left As DataTable = GetTable(sql)
        Dim json As String = "<tr style='font-weight:bold; text-align: center;'><td>Scorecard</td><td>Ready</td><td>No Audio</td><td>Bad Calls</td></tr>"

        For Each dr In calls_left.Rows

            json &= "<tr><td>" & dr("short_name") & "</td><td>" & dr("call_with_audio") & "</td><td><span style='cursor:pointer' onclick='pop_missing_calls(""" & dr("short_name") & """);'>" & dr("calls") - dr("call_with_audio") & "</span></td><td><span style='cursor:pointer' onclick='pop_bad_calls(""" & dr("short_name") & """);'>" & dr("bad_calls") & "</span></td></tr>"

            'json &= "{""appname"":""" & dr("short_name") & """,""calls"":""" & dr("calls") & """,""call_with_audio"":""" & dr("call_with_audio") & """,""bad_calls"":""" & dr("bad_calls") & """},"
        Next

        'json &= "</table><table>"
        json &= "<tr><td colspan=5><hr></td></tr>"

        json &= "<tr style='font-weight:bold; text-align: center;'><td>Call Date</td><td title='Completed/Loaded'>Calls</td><td>Bad</td><td>Scorecard</td></tr>"
        Dim call_date_dt As DataTable = GetTable("select top 100 count(*) as number_calls, sum(max_reviews) as completed_calls, sum(bad_call) as bad_calls, format(convert(date, call_date),'M/d/yy') as call_date, short_name  from xcc_report_new with (nolock) join scorecards with (nolock) on scorecards.id = xcc_report_new.scorecard where call_date between '" & date_start & "' and '" & date_end & "' and xcc_report_new.scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "') group by convert(date, call_date), short_name order by convert(date, call_date) desc, short_name")


        For Each dr In call_date_dt.Rows

            json &= "<tr><td>" & dr("call_date") & "</td><td>" & dr("completed_calls") & "/" & dr("number_calls") & "</td><td><span style='cursor:pointer' onclick='pop_bad_calls(""" & dr("short_name") & """);'>" & dr("bad_calls") & "</span></td><td>" & dr("short_name") & "</td></tr>"

            'json &= "{""appname"":""" & dr("short_name") & """,""calls"":""" & dr("calls") & """,""call_with_audio"":""" & dr("call_with_audio") & """,""bad_calls"":""" & dr("bad_calls") & """},"
        Next

        Return json

    End Function

    <OperationContract()>
    Public Function GetQAApps(username As String, from As String) As String

        If username = "" Then Return ""

        Dim apps As New DataTable
        If from = "ddlQAs" Then
            apps = GetTable("SELECT * FROM Userapps a with (nolock) JOIN UserExtraInfo e with (nolock) ON a.username = e.username WHERE a.username = '" & username & "' ORDER BY user_priority")
        Else
            apps = GetTable("select userapps.appname + ' (' + short_name + ')' as scorecard, scorecards.id from userapps with (nolock) join userapps with (nolock) on userapps.user_scorecard= xcc_report_new.scorecard WHERE username = '" & username & "' order by userapps.appname")
        End If

        Dim json As String = "["

        For Each dr In apps.Rows
            If from = "ddlQAs" Then
                json &= "{""username"":""" & dr("username") & """,""role"":""" & dr("user_role") & """,""appname"":""" & dr("appname") & """,""user_priority"":""" & dr("user_priority") & """,""max_per_day"":""" & dr("max_per_day") & """},"
            Else
                json &= "{""appname"":""" & dr("appname") & """},"
            End If
        Next

        If Right(json, 1) = "," Then
            json = Left(json, Len(json) - 1)
        End If

        json &= "]"

        Return json

    End Function

    <OperationContract()>
    Public Sub DeleteUserApps(username As String, appname As String)

        If username = "" Or appname = "" Then Exit Sub

        Dim sql As String
        sql = "DELETE FROM UserApps WHERE username = '" & username & "' AND appname = '" & appname & "'"
        Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
        cn.Open()

        Dim query As New SqlCommand(sql, cn)
        query.CommandTimeout = 60
        query.ExecuteNonQuery()

        cn.Close()
        cn.Dispose()

    End Sub

    <OperationContract()>
    Public Sub AddUserApps(username As String, appname As String, quota As String, role As String)

        If username = "" Or appname = "" Then Exit Sub

        Dim sql As String
        Dim cn As New SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("estomes2ConnectionString").ConnectionString)
        cn.Open()
        If role = "" Then
            Exit Sub
        Else
            If Roles.GetRolesForUser(username).Count > 0 Then
                Roles.RemoveUserFromRoles(username, Roles.GetRolesForUser(username))
            End If
            Roles.AddUserToRole(username, role)
            sql = "UPDATE UserExtraInfo SET user_role='" & role & "' WHERE username='" & username & "'"

            Dim query2 As New SqlCommand(sql, cn)
            query2.CommandTimeout = 60
            query2.ExecuteNonQuery()
        End If

        If quota = "" Then quota = "null" Else quota = "'" & quota & "'"
        sql = "INSERT INTO UserApps (username,appname,dateadded,who_added,user_priority,trained_date,max_per_day)  VALUES ('" & username & "','" & appname & "',GETDATE(),'" & HttpContext.Current.User.Identity.Name & "',null,null," & quota & ")"

        Dim query As New SqlCommand(sql, cn)
        query.CommandTimeout = 60
        query.ExecuteNonQuery()

        cn.Close()
        cn.Dispose()

    End Sub

    <OperationContract()>
    Public Sub UpdateUserAppPriority(username As String, appset As String)

        If username = "" Or appset = "" Then Exit Sub
        Dim sql As String
        Dim apps As String() = appset.Split(",")
        Dim app As String()
        For Each item As String In apps
            app = item.Split("=")
            sql = "UPDATE UserApps SET user_priority = " & app(1) & "WHERE username = '" & username & "' AND appname = '" & app(0) & "'"
            UpdateTable(sql)
        Next


    End Sub

    <OperationContract()>
    Public Function UpdateReport() As String

        Dim apps As DataTable = GetTable("SELECT DISTINCT * FROM Userapps a with (nolock) JOIN UserExtraInfo e with (nolock) ON a.username = e.username WHERE user_role = 'QA' OR user_role = 'Trainee' AND active = 1 ORDER BY a.username, appname")

        Dim json As String = "["

        For Each dr In apps.Rows
            json &= "{""username"":""" & dr("username") & """,""role"":""" & dr("user_role") & """,""appname"":""" & dr("appname") & """,""user_priority"":""" & dr("user_priority") & """,""max_per_day"":""" & dr("max_per_day") & """},"
        Next

        If Right(json, 1) = "," Then
            json = Left(json, Len(json) - 1)
        End If

        json &= "]"

        Return json

    End Function

    <OperationContract()>
    Public Sub SaveCoachingLog(QA As String, TL As String, Reason As String, ActionID As String, DiscussionPoints As String, ID As Integer, form_id As Integer)

        If QA = "" Or TL = "" Or ActionID = "" Then Exit Sub

        Dim sql As String
        If ID = 0 Then
            sql = "INSERT INTO CoachingLog SELECT '" & QA & "', '" & TL & "', getdate(), getdate(), '" & Reason.Replace("'", "''") & "', " & ActionID & ", '" & DiscussionPoints.Replace("'", "''") & "', null, null, null, null, " & form_id
        Else
            sql = "UPDATE CoachingLog SET QA = '" & QA & "', TL = '" & TL & "', ModifiedDate = getdate(), Reason = '" & Reason.Replace("'", "''") & "', ActionID = " & ActionID & ", DiscussionPoints = '" & DiscussionPoints.Replace("'", "''") & "' WHERE ID = " & ID
        End If

        UpdateTable(sql)


    End Sub

    <OperationContract()>
    Public Function UpdateCoachingReport(user As String, role As String) As List(Of CoachingReport)

        If user = "" And role = "" Then Return Nothing

        Dim apps As DataTable
        If role = "QA" Then
            apps = GetTable("SELECT ISNULL(first_name + ISNULL(' ' + last_name,''),u.username) AS fullname, c.ID as ID, * FROM CoachingLog c with (nolock) JOIN UserExtraInfo u with (nolock) ON c.QA = u.username WHERE QA = '" & user & "' OR first_name + ' ' + last_name = '" & user & "' ORDER BY CoachingDate DESC")
        ElseIf role = "QA Lead" Or role = "Calibrator" Then
            apps = GetTable("SELECT ISNULL(first_name + ISNULL(' ' + last_name,''),u.username) AS fullname, c.ID as ID, * FROM CoachingLog c with (nolock) JOIN UserExtraInfo u with (nolock) ON c.QA = u.username WHERE TL = '" & user & "' OR first_name + ' ' + last_name = '" & user & "' ORDER BY CoachingDate DESC")
        Else
            apps = GetTable("SELECT ISNULL(first_name + ISNULL(' ' + last_name,''),u.username) AS fullname, c.ID as ID, * FROM CoachingLog c with (nolock) JOIN UserExtraInfo u with (nolock) ON c.QA = u.username ORDER BY CoachingDate")
        End If

        Dim sr_items As New List(Of CoachingReport)

        For Each dr As DataRow In apps.Rows
            Dim report As New CoachingReport
            report.fullname = dr("fullname").ToString
            report.ID = dr("ID").ToString
            report.TL = dr("TL").ToString
            report.CoachingDate = dr("CoachingDate").ToString.Split(" ")(0)
            report.QASigned = dr("QASigned").ToString.Split(" ")(0)
            report.TLSigned = dr("TLSigned").ToString.Split(" ")(0)
            report.ManagerSigned = dr("ManagerSigned").ToString.Split(" ")(0)
            sr_items.Add(report)
        Next

        Return sr_items

    End Function

    Public Class CoachingReport
        Public fullname As String
        Public CoachingDate As String
        Public QASigned As String
        Public TLSigned As String
        Public ManagerSigned As String

        Public ID As String
        Public TL As String
        Public Reason As String
        Public ActionID As String
        Public DiscussionPoints As String
        Public QAResponse As String
    End Class

    <OperationContract()>
    Public Function GetCoachingLog(ID As Integer) As List(Of CoachingReport)

        If ID < 0 Then Return Nothing

        Dim log As DataTable = GetTable("SELECT ISNULL(first_name + ISNULL(' ' + last_name,''),u.username) AS fullname,* FROM CoachingLog c with (nolock) JOIN UserExtraInfo u with (nolock) ON c.QA = u.username WHERE c.id = '" & ID & "'")

        Dim sr_items As New List(Of CoachingReport)

        For Each dr As DataRow In log.Rows
            Dim report As New CoachingReport
            report.fullname = dr("fullname").ToString
            report.TL = dr("TL").ToString
            report.CoachingDate = dr("CoachingDate").ToString.Split(" ")(0)
            report.Reason = dr("Reason").ToString
            report.ActionID = dr("ActionID").ToString
            report.DiscussionPoints = dr("DiscussionPoints").ToString
            report.QAResponse = dr("QAResponse").ToString
            sr_items.Add(report)
        Next

        Return sr_items

    End Function

    <OperationContract()>
    Public Function AddActionPlans(Owner As String, Action As String, Timeline As String, ID As Integer) As List(Of ActionPlans)

        If ID < 1 Then Return Nothing

        If Owner.Length() > 0 And Action.Length() > 0 And Timeline.Length() > 0 Then
            Dim sql As String = "INSERT INTO ActionPlans SELECT " & ID & ", '" & Owner & "', '" & Action.Replace("'", "''") & "', '" & Timeline.Replace("'", "''") & "'"


            UpdateTable(sql)

        End If


        Dim log As DataTable = GetTable("SELECT * FROM ActionPlans with (nolock) WHERE CoachingLogID = " & ID)

        Dim sr_items As New List(Of ActionPlans)

        For Each dr As DataRow In log.Rows
            Dim plan As New ActionPlans
            plan.ID = dr("ID").ToString
            plan.Owner = dr("Owner").ToString
            plan.Action = dr("Action").ToString
            plan.Timeline = dr("Timeline").ToString.Split(" ")(0)
            sr_items.Add(plan)
        Next

        Return sr_items

    End Function

    Public Class ActionPlans
        Public ID As String
        Public Owner As String
        Public Action As String
        Public Timeline As String
    End Class

    <OperationContract()>
    Public Sub DeleteActionPlan(ID As String)

        If ID = "" Then Exit Sub

        Dim sql As String
        sql = "DELETE FROM ActionPlans WHERE ID = '" & ID & "'"
        UpdateTable(sql)

    End Sub

    <OperationContract()>
    Public Sub UpdateSign(ID As Integer, Role As String, QAResponse As String)

        If ID < 0 Or Role = "" Then Exit Sub

        Dim sql As String
        If Role = "QA" Then
            sql = "UPDATE CoachingLog SET QASigned = getdate(), QAResponse = '" & QAResponse.Replace("'", "''") & "', ModifiedDate = getdate() WHERE ID = " & ID
        ElseIf Role = "QA Lead" Or Role = "Calibrator" Then
            sql = "UPDATE CoachingLog SET TLSigned = getdate(), ModifiedDate = getdate() WHERE ID = " & ID
        ElseIf Role = "Calibrator" Then
            sql = "UPDATE CoachingLog SET TLSigned = getdate(), ModifiedDate = getdate() WHERE ID = " & ID
        Else
            sql = "UPDATE CoachingLog SET ManagerSigned = getdate(), ModifiedDate = getdate() WHERE ID = " & ID
        End If

        UpdateTable(sql)

    End Sub

    <OperationContract()>
    Public Sub ResetTLSign(id As String)

        If id = "" Then Exit Sub

        Dim sql As String = "UPDATE CoachingLog SET TLSigned = null WHERE id = " & id

        UpdateTable(sql)

    End Sub

    <OperationContract()>
    Public Function GetQAData(QA As String) As String

        Dim data As DataTable = GetTable("SELECT startdate, starting_salary FROM UserExtraInfo with (nolock) WHERE username = '" & QA & "'")

        Dim json As String = "[{""start_date"":""" & data.Rows(0).Item(0) & """,""start_salary"":""" & data.Rows(0).Item(1) & """}]"

        Return json

    End Function

    <OperationContract()>
    Public Sub UpdateQAStart(username As String, start_date As String, start_salary As String)

        If start_date = "" And start_salary = "" Then Exit Sub
        If start_date = "" Then start_date = "null" Else start_date = "'" & start_date & "'"
        If start_salary = "" Then start_salary = "0"

        Dim sql As String = "UPDATE UserExtraInfo SET startdate = " & start_date & ", starting_salary = '" & start_salary & "' WHERE username = '" & username & "'"
        UpdateTable(sql)

    End Sub

    <OperationContract()>
    Public Function ClientUpdate(username As String) As List(Of ClientUpdateData)

        Dim messaging As DataTable = GetTable("getMyMessages '" & HttpContext.Current.User.Identity.Name & "'")

        Dim list As New List(Of ClientUpdateData)

        For Each dr As DataRow In messaging.Rows
            Dim data As New ClientUpdateData
            data.id = dr("id").ToString
            data.dateadded = CDate(dr("dateadded")).ToString("M/d/yy")
            data.dateaddedtime = CDate(dr("dateadded")).ToString("T")
            data.dateclosed = dr("dateclosed").ToString
            data.from_login = dr("from_login").ToString
            data.subject = dr("subject").ToString
            data.message_text = dr("message_text").ToString
            list.Add(data)
        Next

        Return list

    End Function

    Public Class ClientUpdateData
        Public id As String
        Public dateadded As String
        Public dateaddedtime As String
        Public dateclosed As String
        Public from_login As String
        Public subject As String
        Public message_text As String
    End Class

    <OperationContract()>
    Public Sub ClientUpdateAck(id As String)

        If id = "" Then Exit Sub

        Dim sql As String = "UPDATE messaging SET dateclosed = getdate() WHERE id = " & id

        UpdateTable(sql)

    End Sub

    <OperationContract()>
    Public Function GetWorstDeviation(username As String, appname As String, start_date As String, end_date As String, agent_group As String, agent As String, campaign As String) As List(Of WorstDeviation)

        Dim table As DataTable = GetTable("getTop50Deviations '" & username & "','" & appname & "','" & start_date & "','" & end_date & "','" & agent_group & "','" & agent & "','" & campaign & "'")

        Dim list As New List(Of WorstDeviation)

        For Each dr As DataRow In table.Rows
            Dim data As New WorstDeviation
            data.total_dev = dr("total_dev").ToString
            data.form_id = dr("form_id").ToString
            data.appname = dr("appname").ToString
            list.Add(data)
        Next

        Return list

    End Function

    Public Class WorstDeviation
        Public total_dev As String
        Public form_id As String
        Public appname As String
    End Class

    <OperationContract()>
    Public Sub UpdateFormScore3(username As String, formid As String)

        If username = "" And formid = "" Then Exit Sub

        Dim sql As String = "UPDATE form_score3 SET deviation_reviewed = getdate(), deviation_reviewed_by = '" & username & "' WHERE id = " & formid

        UpdateTable(sql)

    End Sub



    <OperationContract()>
    Public Function GetClientCalibrations() As String


        Dim ret_val As String = ""

        Dim wk_summary As DataTable = GetTable("getClientWeeklySummary '" & HttpContext.Current.User.Identity.Name & "'")

        If wk_summary.Rows.Count > 0 Then

            ret_val = "<hr><table width='100%' class='detailsTable'><thead><tr><td>Week</td><td># Cals</td><td>Cal Done</td><td># Reviews</td></tr></thead><tbody>"

            For Each dr As DataRow In wk_summary.Rows

                Dim bk_color As String = "white"

                ret_val &= "<tr>"
                ret_val &= "<td>" & dr("week_ending") & "</td>"
                ret_val &= "<td>" & dr("number_assigned") & "</td><td>" & dr("number_completed") & "</td><td>" & dr("number_reviews_completed") & "</td></tr>"
            Next


            ret_val &= "</tbody></table>"

        End If


        ret_val &= "<hr>"

        Dim client_list As DataTable = GetTable("exec [getClientCalibrations] '" & HttpContext.Current.User.Identity.Name & "'")

        If client_list.Rows.Count > 0 Then

            ret_val &= "<table width='100%' class='detailsTable'><thead><tr><td>Scorecard</td><td>Date Added</td><td>Reviews</td><td></td></tr></thead><tbody>"

            For Each dr As DataRow In client_list.Rows

                Dim bk_color As String = "white"

                ret_val &= "<tr>"
                ret_val &= "<td>" & dr("short_name")

                If dr("phone").ToString <> "" Then
                    ret_val &= "<br>(" & dr("phone") & ")"
                End If
                ret_val &= "</td>"
                ret_val &= "<td>" & CDate(dr("dateadded")).ToShortDateString & "</td>"
                ret_val &= "<td>" & dr("real_num_completed") & "/" & dr("real_num_reviews") & "</td><td><a href='review_calib_record_client.aspx?ID=" & dr("form_id").ToString & "' target=_blank><img src='/img/small_play.PNG' height='15' style='position: relative; top: 2px;'></a></td></tr>"
            Next


            ret_val &= "</tbody></table>"

        End If



        Return ret_val
    End Function


    <OperationContract()>
    Public Function GetUserAppsByWeekEnding(user As String, wedate As String) As String

        Dim apps As DataTable = GetTable("SELECT DISTINCT scorecard, short_name FROM vwForm with (nolock) join scorecards with (nolock) on scorecards.id = vwForm.scorecard WHERE week_ending_date = '" & wedate & "' and reviewer = '" & user & "' ORDER BY short_name")

        Dim json As String = "["

        For Each dr In apps.Rows
            json &= "{""ID"":""" & dr("scorecard") & """,""scorecard"":""" & dr("short_name") & """},"
        Next

        If Right(json, 1) = "," Then
            json = Left(json, Len(json) - 1)
        End If

        json &= "]"

        Return json

    End Function


    <OperationContract()>
    Public Function getCoachingQueue(filter As String) As String


        Dim user_info As DataTable = GetTable("select * from userextrainfo with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'")

        If user_info.Rows.Count > 0 Then
            If user_info.Rows(0).Item("user_group").ToString <> "" Then
                filter &= " and AGENT_GROUP = '" & user_info.Rows(0).Item("user_group").ToString & "' "
                'litGroupFilter.Text = userProfile.Group
            End If
        End If

        Dim sql As String = "exec getCoachingQueue '" & HttpContext.Current.User.Identity.Name & "','" & filter.Replace("'", "''") & " '"

        Dim client_list As DataTable = GetTable(sql)

        Dim ret_val As String = ""

        For Each dr As DataRow In client_list.Rows


            Dim comments() As String = dr("AllComments").ToString.Split("|")
            Dim comment_id As Integer = 1
            Dim all_comments As String = ""
            For Each comment In comments
                If Trim(comment) <> "" Then
                    all_comments &= "<i class='fa fa-file comment" & comment_id & "'></i><span style='white-space:normal'>" & Trim(comment.Replace("&lt;br&gt;", "<br>")) & "</span>"
                End If
                comment_id += 1
            Next


            Dim noti_owned As String = "1"

            If dr("non_edit").ToString <> "" Then
                noti_owned = "0"
            End If

            ret_val &= "<tr>"
            ret_val &= "<td>" & dr("agent") & "</td><td>" & dr("call_date") & "</td><td class='popup-comments'>" & all_comments & "</td><td>"
            ret_val &= "<img src='img/yellow_exclamation.png' class='noti-click' title='Open " & dr("notificationStep") & " Notification' data-notiowned='" & noti_owned & "'"
            ret_val &= "data-notiid='" & dr("ID") & "' data-notiso='" & dr("sup_override").ToString & "'  data-notistep='" & dr("notificationStep") & "' data-phone='" & dr("phone") & "' data-formid='" & dr("form_id") & "'"
            ret_val &= "onclick='pop_notification($(this).attr(""data-notiid""),$(this).attr(""data-notistep""), """ & dr("first_error") & """,""" & dr("form_id") & """,""" & dr("sup_override").ToString & """);'>"
            ret_val &= "</td><td valign='middle'>"
            ret_val &= "<a href='review_record.aspx?ID=" & dr("form_id") & "' target='_blank'>"
            ret_val &= "<img src='/img/small_play.PNG' height='15' style='position: relative; top: 2px;'>"
            ret_val &= "</a>"
            ret_val &= "</td>"
            ret_val &= "</tr>"

        Next


        Return ret_val
    End Function

    <OperationContract()>
    Public Function getCoachingEscQueue() As String

        Dim sql As String = "exec getCoachingEscQueue '" & HttpContext.Current.User.Identity.Name & "'"

        Dim client_list As DataTable = GetTable(sql)

        Dim ret_val As String = ""

        If HttpContext.Current.User.IsInRole("Admin") Or HttpContext.Current.User.IsInRole("QA Lead") Then

            For Each dr As DataRow In client_list.Rows


                Dim comments() As String = dr("AllComments").ToString.Split("|")
                Dim comment_id As Integer = 1
                Dim all_comments As String = ""
                For Each comment In comments
                    If Trim(comment) <> "" Then
                        all_comments &= "<i class='fa fa-file comment" & comment_id & "'></i><span style='white-space:normal'>" & Trim(comment.Replace("&lt;br&gt;", "<br>")) & "</span>"
                    End If
                    comment_id += 1
                Next

                ret_val &= "<tr>"
                ret_val &= "<td>" & dr("agent") & "</td><td>" & dr("call_date") & "</td><td class='popup-comments'>" & all_comments & "</td><td>"
                ret_val &= "<a href='manage_notification.aspx?ID=" & dr("form_id") & "' target='_blank'><img src='img/green_exclamation.png' class='noti-click'></a>"
                ret_val &= "</td><td valign='middle'>"
                ret_val &= "<a href='review_record.aspx?ID=" & dr("form_id") & "' target='_blank'>"
                ret_val &= "<img src='/img/small_play.PNG' height='15' style='position: relative; top: 2px;'>"
                ret_val &= "</a>"
                ret_val &= "</td>"
                ret_val &= "</tr>"

            Next
        End If

        Return ret_val & "<tr><td colspan=10><hr></td></tr>"
    End Function
    <OperationContract()>
    Public Function GetCampaignPerf(start_date As String, end_date As String) As String

        Dim sql As String = "select convert(varchar(10), convert(decimal(10,2), avg(isnull(isnull(edited_score,calib_score),vwForm.total_score)))) + '%' as avg_score, count(*) as num_calls, campaign  from vwForm  with (nolock) join userapps  with (nolock) on userapps.user_scorecard = vwForm.scorecard where call_date between '" & start_date & "' and '" & end_date & "' and username = '" & HttpContext.Current.User.Identity.Name & "' group by campaign order by avg(isnull(isnull(edited_score,calib_score),vwForm.total_score))"

        Dim client_list As DataTable = GetTable(sql)

        Dim ret_val As String = ""


        For Each dr As DataRow In client_list.Rows

            ret_val &= "<tr>"
            ret_val &= "<td>" & dr("avg_score") & "</td><td>" & dr("num_calls") & "</td><td>" & dr("campaign") & "</td>"
            ret_val &= "</td>"
            ret_val &= "</tr>"

        Next

        Return ret_val
    End Function
    <OperationContract()>
    Public Function GetGroupPerf(start_date As String, end_date As String) As String

        Dim sql As String = "select convert(varchar(10), convert(decimal(10,2), avg(isnull(isnull(edited_score,calib_score),vwForm.total_score)))) + '%' as avg_score, count(*) as num_calls, agent_group  from vwForm  with (nolock) join userapps  with (nolock) on userapps.user_scorecard = vwForm.scorecard where call_date between '" & start_date & "' and '" & end_date & "' and username = '" & HttpContext.Current.User.Identity.Name & "' group by agent_group order by avg(isnull(isnull(edited_score,calib_score),vwForm.total_score))"

        Dim client_list As DataTable = GetTable(sql)

        Dim ret_val As String = ""


        For Each dr As DataRow In client_list.Rows

            ret_val &= "<tr>"
            ret_val &= "<td>" & dr("avg_score") & "</td><td>" & dr("num_calls") & "</td><td>" & dr("agent_group") & "</td>"
            ret_val &= "</td>"
            ret_val &= "</tr>"

        Next

        Return ret_val
    End Function
    <OperationContract()>
    Public Sub UpdateUserPassword(username As String, newpassword As String)

        If username = "" Or newpassword = "" Then Exit Sub

        Dim mu As MembershipUser = Membership.GetUser(username)
        mu = Membership.GetUser(username, False)
        If mu Is Nothing Then
            Exit Sub
        End If
        mu.ChangePassword(mu.ResetPassword(), newpassword)

    End Sub


    <OperationContract()>
    Public Sub UpdateUserMaxPerDay(qa As String, appname As String, maxperday As String)

        If qa = "" Or appname = "" Then Exit Sub
        If maxperday = "" Then maxperday = "null"

        Dim sql As String = "UPDATE Userapps SET max_per_day = " & maxperday & " WHERE username = '" & qa & "' AND appname = '" & appname & "'"

        UpdateTable(sql)

    End Sub


    <OperationContract()>
    Public Sub Escalate(fid As String, escalatedby As String, comments As String)

        If fid = "" Or escalatedby = "" Then Exit Sub

        Dim sql As String = "UPDATE form_notifications SET escalated = getdate(), escalated_by = '" & escalatedby & "', comment = '" & comments.Replace("'", "''") & "' WHERE id = " & fid

        UpdateTable(sql)

    End Sub

    Public Class UserInfo
        Public first_name As String
        Public last_name As String
        Public username As String
        Public email As String
        Public phone As String
        Public CoachingQ As String
        Public SpeedInc As String
        Public ImmediatePlay As Boolean
        Public guideline_display As String
        Public presubmit As String
    End Class

    <OperationContract()>
    Public Function getUserInfo() As UserInfo

        Dim ui As New UserInfo
        Dim user_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "'")
        If user_dt.Rows.Count > 0 Then
            Dim dr As DataRow = user_dt.Rows(0)
            'ui.CoachingQ = dr("")
            ui.username = HttpContext.Current.User.Identity.Name
            ui.SpeedInc = dr("speed_increment").ToString
            ui.first_name = dr("first_name").ToString
            ui.last_name = dr("last_name").ToString
            ui.phone = dr("phone_number").ToString
            ui.ImmediatePlay = dr("calls_start_immediately")
            ui.email = dr("email_address").ToString
            ui.guideline_display = dr("guideline_display").ToString
            ui.presubmit = dr("presubmit").ToString
        End If

        Return ui

    End Function

    <OperationContract()>
    Public Function updateUserInfo(value As String, field As String) As String

        Dim update_result As String = "True"

        If field = "password" Then
            Dim pass_pieces() As String = value.Split("|")


            Try
                If pass_pieces(1) = pass_pieces(2) Then
                    Dim mu As MembershipUser = Membership.GetUser(HttpContext.Current.User.Identity.Name)
                    update_result = mu.ChangePassword(pass_pieces(0), pass_pieces(1))

                End If
            Catch ex As Exception
                update_result = ex.Message
            End Try

            ' Verify first password is correct, compare 2&3, update with 3 if all that is valid


            'UpdateTable("update userextrainfo set " & field & " = '" & value.Replace("'", "''") & "' where username = '" & HttpContext.Current.User.Identity.Name & "'")
        Else
            UpdateTable("update userextrainfo set " & field & " = '" & value.Replace("'", "''") & "' where username = '" & HttpContext.Current.User.Identity.Name & "'")
        End If

        Return update_result
    End Function

    <OperationContract()>
    Public Function GetQACalibScore(start_date As String, end_date As String) As String ', hdnAgentFilter As String

        Dim prior_start_date As String = DateAdd(DateInterval.Month, -1, CDate(start_date)).ToShortDateString
        Dim prior_end_date As String = DateAdd(DateInterval.Month, -1, CDate(end_date)).ToShortDateString

        Dim avg_dt As DataTable = GetTable("SELECT ISNULL(ROUND(AVG(total_score),0),0) as avg_score FROM calibration_form with (nolock) WHERE CONVERT(DATE, review_date) BETWEEN '" & start_date & "' AND '" & end_date & "' UNION ALL SELECT ISNULL(ROUND(AVG(total_score),0),0) as avg_score FROM calibration_form with (nolock) WHERE CONVERT(DATE, review_date) BETWEEN '" & prior_start_date & "' AND '" & prior_end_date & "'")

        If avg_dt.Rows.Count = 2 Then
            Return avg_dt.Rows(0).Item(0) & ":" & avg_dt.Rows(0).Item(0) - avg_dt.Rows(1).Item(0)
        End If

        Return ""

    End Function

    <OperationContract()>
    Public Function GetQADisputeScore(start_date As String, end_date As String) As String ', hdnAgentFilter As String

        Dim prior_start_date As String = DateAdd(DateInterval.Month, -1, CDate(start_date)).ToShortDateString
        Dim prior_end_date As String = DateAdd(DateInterval.Month, -1, CDate(end_date)).ToShortDateString

        Dim avg_dt As DataTable = GetTable("SELECT COUNT(*) FROM form_notifications with (nolock) JOIN form_score3 with (nolock) ON form_score3.id = form_notifications.form_id WHERE close_reason = 'Agree' AND sup_override IS NULL AND role = 'QA' AND CONVERT(DATE, review_date) BETWEEN '" & start_date & "' AND '" & end_date & "' UNION ALL SELECT COUNT(*) FROM form_notifications with (nolock) JOIN form_score3 with (nolock) ON form_score3.id = form_notifications.form_id WHERE close_reason = 'Agree' AND sup_override IS NULL AND role = 'QA' AND CONVERT(DATE, review_date) BETWEEN '" & prior_start_date & "' AND '" & prior_end_date & "'")

        If avg_dt.Rows.Count = 2 Then
            Return avg_dt.Rows(0).Item(0) & ":" & avg_dt.Rows(0).Item(0) - avg_dt.Rows(1).Item(0)
        End If

        Return ""

    End Function

    <OperationContract()>
    Public Function GetQAEffScore(start_date As String, end_date As String) As String ', hdnAgentFilter As String

        Dim prior_start_date As String = DateAdd(DateInterval.Month, -1, CDate(start_date)).ToShortDateString
        Dim prior_end_date As String = DateAdd(DateInterval.Month, -1, CDate(end_date)).ToShortDateString

        Dim avg_dt As DataTable = GetTable("select convert(decimal(10,2),(convert(decimal(10,2),(sum(convert(float,call_length))/3600)/(sum(convert(float,datediff(s, review_started, review_date)))/3600) * 100))) as efficiency from form_score3 join XCC_REPORT_NEW on XCC_REPORT_NEW.ID = form_score3.review_ID where CONVERT(DATE, review_date) BETWEEN '" & start_date & "' AND '" & end_date & "' union all select convert(decimal(10,2),(convert(decimal(10,2),(sum(convert(float,call_length))/3600)/(sum(convert(float,datediff(s, review_started, review_date)))/3600) * 100))) as efficiency from form_score3 with (nolock) join XCC_REPORT_NEW with (nolock) on XCC_REPORT_NEW.ID = form_score3.review_ID where CONVERT(DATE, review_date) BETWEEN '" & prior_start_date & "' AND '" & prior_end_date & "'")

        If avg_dt.Rows.Count = 2 Then
            Return avg_dt.Rows(0).Item(0) & ":" & avg_dt.Rows(0).Item(0) - avg_dt.Rows(1).Item(0)
        End If

        Return ""

    End Function

    <OperationContract()>
    Public Function GetQACalibRanking(start_date As String, end_date As String) As List(Of QACalibRanking)

        Dim mi_items As New List(Of QACalibRanking)

        Dim stats_dt As DataTable = GetTable("exec getQACalibRanking2 '" & start_date & "', '" & end_date & "','" & HttpContext.Current.User.Identity.Name & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New QACalibRanking
            _mi.avg_score = dr("calib_score").ToString
            _mi.qa = dr("reviewer").ToString
            _mi.div_color = ""
            _mi.top3 = ""

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class QACalibRanking
        Public avg_score As String
        Public qa As String
        Public div_color As String
        Public top3 As String
    End Class

    <OperationContract()>
    Public Function GetQADisputeRanking(start_date As String, end_date As String) As List(Of QADisputeRanking)

        Dim mi_items As New List(Of QADisputeRanking)

        Dim stats_dt As DataTable = GetTable("SELECT reviewer, COUNT(*) AS dispute FROM form_notifications JOIN form_score3 ON form_score3.id = form_notifications.form_id WHERE close_reason = 'Agree' AND sup_override IS NULL AND role = 'QA' AND CONVERT(DATE, review_date) BETWEEN '" & start_date & "' AND '" & end_date & "' GROUP BY reviewer ORDER BY dispute DESC, reviewer")

        For Each dr In stats_dt.Rows
            Dim _mi As New QADisputeRanking
            _mi.dispute = dr("dispute").ToString
            _mi.qa = dr("reviewer").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class QADisputeRanking
        Public dispute As String
        Public qa As String
    End Class

    <OperationContract()>
    Public Function GetQAEffRanking(start_date As String, end_date As String) As List(Of QAEffRanking)

        Dim mi_items As New List(Of QAEffRanking)

        Dim stats_dt As DataTable = GetTable("select reviewer, convert(decimal(10,2),(convert(decimal(10,2),(sum(convert(float,call_length))/3600)/(sum(convert(float,datediff(s, review_started, review_date)))/3600) * 100))) as efficiency from form_score3 with (nolock) join XCC_REPORT_NEW with (nolock) on XCC_REPORT_NEW.ID = form_score3.review_ID where CONVERT(DATE, review_date) BETWEEN '" & start_date & "' AND '" & end_date & "' GROUP BY reviewer ORDER BY efficiency")

        For Each dr In stats_dt.Rows
            Dim _mi As New QAEffRanking
            _mi.efficiency = dr("efficiency").ToString
            _mi.qa = dr("reviewer").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class QAEffRanking
        Public efficiency As String
        Public qa As String
    End Class

    <OperationContract()>
    Public Function GetTLCalibRanking(start_date As String, end_date As String) As List(Of TLCalibRanking)

        Dim mi_items As New List(Of TLCalibRanking)

        Dim stats_dt As DataTable = GetTable("SELECT reviewed_by, ROUND(AVG(c.total_score),0) AS avg_score FROM calibration_form c with (nolock) JOIN form_score3 f with (nolock) ON f.id = c.original_form WHERE CONVERT(DATE, f.review_date) between '" & start_date & "' and '" & end_date & "' GROUP BY reviewed_by ORDER BY avg_score")

        For Each dr In stats_dt.Rows
            Dim _mi As New TLCalibRanking
            _mi.avg_score = dr("avg_score").ToString
            _mi.tl = dr("reviewed_by").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class TLCalibRanking
        Public avg_score As String
        Public tl As String
    End Class

    <OperationContract()>
    Public Function GetTLNotifRanking(start_date As String, end_date As String) As List(Of TLNotifRanking)

        Dim mi_items As New List(Of TLNotifRanking)

        Dim stats_dt As DataTable = GetTable("exec getNotifBySC '" & start_date & "','" & end_date & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New TLNotifRanking
            _mi.notif = dr("totalopen").ToString
            _mi.appname = dr("appname").ToString
            _mi.ag = dr("open_agent").ToString
            _mi.su = dr("open_supervisor").ToString
            _mi.qa = dr("open_QA").ToString
            _mi.tl = dr("open_tl").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class TLNotifRanking
        Public notif As String
        Public appname As String
        Public ag As String
        Public su As String
        Public qa As String
        Public tl As String

    End Class

    <OperationContract()>
    Public Function GetQAStats(start_date As String, end_date As String, hdnAgentFilter As String, Optional filter_array As String = "") As List(Of QAStats)

        Dim mi_items As New List(Of QAStats)

        'Dim stats_dt As DataTable = GetTable("select CONVERT(varchar,count(*)) as result, 'reviewed' as label from vwForm where convert(date,review_date) between '" & start_date & "' and '" & end_date & "' union all select CONVERT(varchar,count(*)) as result, 'received' as label from vwform where convert(date,call_date) between '" & start_date & "' and '" & end_date & "' union all select CONVERT(varchar,min(date_added),101) as result, 'oldest' as label  from xcc_report_new where max_reviews = 0 union all select CONVERT(varchar,count(*)) as result, 'pending' as label  from xcc_report_new where max_reviews = 0")
        Dim stats_dt As DataTable = GetTable("exec [getQAStats] '" & start_date & "','" & end_date & "','" & HttpContext.Current.User.Identity.Name & "', '" & hdnAgentFilter.Replace("'", "''") & "', '" & filter_array.Replace("'", "''") & "'")
        For Each dr In stats_dt.Rows
            Dim _mi As New QAStats
            _mi.result = dr("result").ToString
            _mi.label = dr("label").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class QAStats
        Public result As String
        Public label As String
    End Class

    <OperationContract()>
    Public Function GetCLCalibRanking(start_date As String, end_date As String) As List(Of CLCalibRanking)

        Dim mi_items As New List(Of CLCalibRanking)

        Dim stats_dt As DataTable = GetTable("getCLCalibRanking '" & start_date & "', '" & end_date & "','" & HttpContext.Current.User.Identity.Name & "'")

        For Each dr In stats_dt.Rows
            Dim _mi As New CLCalibRanking
            _mi.calib = dr("cal_score").ToString
            _mi.cl = dr("appname").ToString
            _mi.num_calib = dr("num_calib").ToString
            _mi.total = dr("total").ToString
            _mi.percent_completed = dr("percent_completed").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class CLCalibRanking
        Public calib As String
        Public cl As String
        Public num_calib As String
        Public total As String
        Public percent_completed As String
    End Class

    <OperationContract()>
    Public Function GetCLDisputeRanking(start_date As String, end_date As String) As List(Of CLDisputeRanking)

        Dim mi_items As New List(Of CLDisputeRanking)

        Dim stats_dt As DataTable = GetTable("select count(*) as disputes, appname from vwFN with (nolock) where date_closed between '" & start_date & "' and '" & end_date & "' and close_reason = 'Agree' and role = 'QA' group by appname order by disputes desc, appname")

        For Each dr In stats_dt.Rows
            Dim _mi As New CLDisputeRanking
            _mi.disputes = dr("disputes").ToString
            _mi.cl = dr("appname").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class CLDisputeRanking
        Public disputes As String
        Public cl As String
    End Class

    <OperationContract()>
    Public Function GetCLEffRanking(start_date As String, end_date As String) As List(Of CLEffRanking)

        Dim mi_items As New List(Of CLEffRanking)

        Dim stats_dt As DataTable = GetTable("select convert(decimal(10,2),(convert(decimal(10,2),(sum(convert(float,call_length))/3600)/(sum(convert(float,datediff(s, review_started, review_date)))/3600) * 100))) as eff, appname from vwForm with (nolock) where call_length > 0 and review_date between '" & start_date & "' and '" & end_date & "' group by appname order by eff, appname")

        For Each dr In stats_dt.Rows
            Dim _mi As New CLEffRanking
            _mi.eff = dr("eff").ToString
            _mi.cl = dr("appname").ToString

            mi_items.Add(_mi)
        Next

        Return mi_items

    End Function

    Public Class CLEffRanking
        Public eff As String
        Public cl As String
    End Class

    <OperationContract()>
    Public Function GetQnA(aid As String) As List(Of QnA)

        If aid = "" Then Return Nothing

        Dim QnAs As New List(Of QnA)

        Dim dt As DataTable = GetTable("SELECT q.Question, a.Answer FROM ApplicantsQnA a with (nolock) INNER JOIN ApplicantsQ q with (nolock) ON a.QuestionID = q.ID WHERE ApplicantID = " & aid)

        For Each dr In dt.Rows
            Dim QnA As New QnA
            QnA.q = dr("Question").ToString
            QnA.a = dr("Answer").ToString

            QnAs.Add(QnA)
        Next

        Return QnAs

    End Function

    Public Class QnA
        Public q As String
        Public a As String
    End Class


    <OperationContract()>
    Public Sub UpdateScorecard(scorecard As String)


        UpdateTable("delete from sc_update where reviewer = '" & HttpContext.Current.User.Identity.Name & "' and sc_id = '" & scorecard & "'")
        UpdateTable("insert into sc_update (reviewer, sc_id, date_reviewed) select '" & HttpContext.Current.User.Identity.Name & "','" & scorecard & "', Getdate()")

    End Sub



    <OperationContract()>
    Public Function GetQAScores(start_date As String, end_date As String) As List(Of QAScores)

        If start_date = "" Or end_date = "" Then Return Nothing

        Dim list As New List(Of QAScores)

        Dim dt As DataTable = GetTable("getQAScores '" & start_date & "', '" & end_date & "','" & HttpContext.Current.User.Identity.Name & "'")

        For Each dr In dt.Rows
            Dim result As New QAScores
            result.today = dr("today").ToString
            result.lastmonth = dr("lastmonth").ToString
            If CInt(result.today) = CInt(result.lastmonth) Then
                result.direction = ""
            ElseIf CInt(result.today) > CInt(result.lastmonth) Then
                result.direction = "positive"
            Else
                result.direction = "negative"
            End If

            list.Add(result)
        Next

        Return list

    End Function

    Public Class QAScores
        Public today As String
        Public lastmonth As String
        Public direction As String
    End Class




    <OperationContract()>
    Public Function GetLastLoginDate(qa As String) As String

        Dim user_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username =  '" & qa & "'")

        If user_dt.Rows.Count > 0 Then
            Return user_dt.Rows(0).Item("lastactivedate").ToString
        Else
            Return ""
        End If

    End Function

    <OperationContract()>
    Public Function ResetLastLoginDate(qa As String) As String

        UpdateTable("update userextrainfo set lastactivedate = getdate() where username =  '" & qa & "'")

        Dim user_dt As DataTable = GetTable("select * from userextrainfo with (nolock) where username =  '" & qa & "'")

        If user_dt.Rows.Count > 0 Then
            Return user_dt.Rows(0).Item("lastactivedate").ToString
        Else
            Return ""
        End If

    End Function

    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetQualityA(start_date As String, end_date As String, scorecard As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable


        'Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        stats_dt = GetTable("Select distinct reviewer from vwform  with (nolock) where call_date >= '" & start_date & "' and call_date <= '" & end_date & "'  order by reviewer")

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("reviewer").ToString
            _mi.value = dr("reviewer").ToString

            'If HttpContext.Current.Session("reviewer") = dr("reviewer").ToString Then
            '    _mi.selected = "selected"
            'Else
            '    _mi.selected = ""
            'End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function


    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetNonBillable(start_date As String, end_date As String, scorecard As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable


        'Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        stats_dt = GetTable("exec getNonBilllable " & scorecard)

        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("comment").ToString
            _mi.value = dr("id").ToString

            'If HttpContext.Current.Session("reviewer") = dr("reviewer").ToString Then
            '    _mi.selected = "selected"
            'Else
            '    _mi.selected = ""
            'End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function



    <OperationContract()>
    <WebInvoke(Method:="POST", BodyStyle:=WebMessageBodyStyle.WrappedRequest, ResponseFormat:=WebMessageFormat.Json)>
    Public Function GetManagers(start_date As String, end_date As String, scorecard As String) As List(Of DBOptions)

        'start_date = "1/1/2015"
        'end_date = "3/1/2015"
        'appname = "edsoup"
        'group = "Edsoup"


        Dim mi_items As New List(Of DBOptions)


        Dim stats_dt As DataTable


        'Dim user_dt As DataTable = GetTable("select * from userextrainfo where username = '" & HttpContext.Current.User.Identity.Name & "'")

        If scorecard <> "" Then
            stats_dt = GetTable("select distinct manager from vwForm join userextrainfo on agent = username where scorecard = '" & scorecard & "'  and call_date between '" & start_date & "' and '" & end_date & "' and scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and manager is not null order by manager")
        Else
            stats_dt = GetTable("select distinct manager from vwForm join userextrainfo on agent = username where call_date between '" & start_date & "' and '" & end_date & "' and scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') and manager is not null order by manager")
        End If



        For Each dr In stats_dt.Rows
            Dim _mi As New DBOptions
            _mi.text = dr("manager").ToString
            _mi.value = dr("manager").ToString

            'If HttpContext.Current.Session("reviewer") = dr("reviewer").ToString Then
            '    _mi.selected = "selected"
            'Else
            '    _mi.selected = ""
            'End If

            mi_items.Add(_mi)

        Next


        Return mi_items

    End Function

    <OperationContract()>
    Public Function getNotifDetails(detail_type As String, username As String, start_date As String, end_date As String, filter As String) As String


        Dim sql As String = "select * from vwFN with (nolock) where "

        Select Case detail_type
            Case "AB"
                sql &= "date_closed is null and role = 'Agent' and agent = '" & username & "' "
            Case "AA"
                sql &= "date_closed is not null and role = 'Agent' and agent = '" & username & "'  and close_reason = 'Agree' "
            Case "AD"
                sql &= "date_closed Is null And role = 'Agent' and agent = '" & username & "' and close_reason = 'Disagree' and sup_override is null  "

            Case "SB"
                sql &= "date_closed is null and role = 'Supervisor' and scorecard in (select user_scorecard from userapps where username = '" & HttpContext.Current.User.Identity.Name & "') "
            Case "SA"
                sql &= "date_closed is not null and role = 'Supervisor' and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "')  and close_reason = 'Agree' "
            Case "SD"
                sql &= "date_closed is not null and role = 'Supervisor' and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "')  and close_reason = 'Disagree' and sup_override is null  "

            Case "QB"
                sql &= "date_closed is null and role = 'QA' and reviewer = '" & username & "' "
            Case "QA", "TD"
                sql &= "date_closed is not null and role = 'QA' and reviewer = '" & username & "'  and close_reason = 'Agree' "
            Case "QD"
                sql &= "date_closed Is not null And role = 'QA' and reviewer = '" & username & "' and close_reason = 'Disagree' and sup_override is null  "

            Case "LB"
                sql &= "date_closed is null and role in ('QA Lead','Calibrator') and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "') "
            Case "LA"
                sql &= "date_closed is not null and role in ('QA Lead','Calibrator') and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "')  and close_reason = 'Agree' "
            Case "LD"
                sql &= "date_closed is not null and role in ('QA Lead','Calibrator') and scorecard in (select user_scorecard from userapps with (nolock) where username = '" & HttpContext.Current.User.Identity.Name & "')  and close_reason = 'Disagree' and sup_override is null  "


        End Select
        sql = sql & filter
        sql &= " and review_date between '" & start_date & "' and '" & end_date & "' "

        Dim noti_dt As DataTable = GetTable(sql)


        Dim ret As String = "<table>"
        For Each dr As DataRow In noti_dt.Rows
            ret &= "<tr><td valign='top'><img src='/img/small_play.PNG' height='15' onclick='window.location.href=""review_record.aspx?ID=" & dr("f_id") & """';></td>"
            ret &= "<td valign='top'>" & dr("call_date") & "</td>"
            ret &= "<td>" & dr("formatted_comments").replace("|", "<br>") & "</td></tr><tr><td colspan=3><hr></td></tr>"
        Next

        ret &= "</table>"

        Return ret
    End Function

End Class
