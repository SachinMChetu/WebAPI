<%@ WebHandler Language="VB" Class="Audio_Streamer" %>

Imports System
Imports System.Web
Imports System.IO
Imports Google.Apis.Drive.v2
Imports Google.Apis.Drive.v2.Data

Imports Google.Apis.Auth.OAuth2
Imports Google.Apis.Services
Imports Google.Apis.Util.Store
Imports System.Net
Imports System.Security.Cryptography.X509Certificates


Public Class Audio_Streamer : Implements IHttpHandler

    ' FLV header
    Private Shared ReadOnly _flvheader As Byte() = HexToByte("464C5601010000000900000009")

    Public Sub New()


    End Sub

    Public Function getService() As DriveService
        HttpContext.Current.Response.Write("Drive API - Service Account" & "<br>")
        HttpContext.Current.Response.Write("==========================" & "<br>")

        Dim serviceAccountEmail As [String] = "1014204203398-7d4geqmdb178jgknujt9gjo602m3a738@developer.gserviceaccount.com"

        Dim scopes As IList(Of String) = New List(Of String)()
        scopes.Add(DriveService.Scope.Drive)
        scopes.Add(DriveService.Scope.DriveFile)

        Dim certificate = New X509Certificate2("D:\wwwroot\dev.callcriteria.com\cc_drive.p12", "notasecret", X509KeyStorageFlags.Exportable)

        Dim credential As New ServiceAccountCredential(New ServiceAccountCredential.Initializer(serviceAccountEmail) With {
        .Scopes = scopes
        }.FromCertificate(certificate))

        '.User = "stace.moss@gmail.com",

        ' Create the service.
        Dim service = New DriveService(New BaseClientService.Initializer() With {
            .HttpClientInitializer = credential,
            .ApplicationName = "DrvMgr"
        })

        Return service

    End Function


    Public Function getFile() As FileList


        Dim gserv As DriveService = getService()

        HttpContext.Current.Response.Write("Executing listing" & "<br>")
        Dim UserFiles As FileList = gserv.Files.List().Execute()

        Return UserFiles

    End Function





    Public Shared Sub printFile(service As DriveService, fileId As [String])
        Try
            Dim file As Google.Apis.Drive.v2.Data.File = service.Files.[Get](fileId).Execute()

            HttpContext.Current.Response.Write("Title: " + file.Title & "<br>")
            HttpContext.Current.Response.Write("Description: " + file.Description & "<br>")
            HttpContext.Current.Response.Write("MIME type: " + file.MimeType & "<br>")
            HttpContext.Current.Response.Write("File ID: " + file.Id & "<br>")
        Catch e As Exception
            HttpContext.Current.Response.Write("An error occurred: " + e.Message & "<br>")
        End Try
    End Sub



    Public Sub ProcessRequest(context As HttpContext) Implements IHttpHandler.ProcessRequest

        'Try

        Dim theFiles As FileList = getFile()

        Dim gserv As DriveService = getService()


        For Each theFile In theFiles.Items

            printFile(gserv, theFile.Id)
            HttpContext.Current.Response.Write("<br>")
        Next



        'Catch ex As Exception

        'End Try
        HttpContext.Current.Response.End()

        'Create a stream for the file
        Dim stream As Stream = Nothing

        'This controls how many bytes to read at a time and send to the client
        Dim bytesToRead As Integer = 10000

        ' Buffer to read bytes in chunk size specified above
        Dim buffer As Byte() = New [Byte](bytesToRead - 1) {}

        ' The number of bytes read
        Try
            'Create a WebRequest to get the file
            Dim fileReq As HttpWebRequest = DirectCast(HttpWebRequest.Create(HttpContext.Current.Request("source")), HttpWebRequest)

            'Create a response for this request
            Dim fileResp As HttpWebResponse = DirectCast(fileReq.GetResponse(), HttpWebResponse)

            If fileReq.ContentLength > 0 Then
                fileResp.ContentLength = fileReq.ContentLength
            End If

            'Get the Stream returned from the response
            stream = fileResp.GetResponseStream()

            ' prepare the response to the client. resp is the client Response
            Dim resp = HttpContext.Current.Response

            'Indicate the type of data being sent
            'resp.ContentType = "application/octet-stream"
            resp.ContentType = "audio/mpeg"
            'Name the file 
            resp.AddHeader("Content-Disposition", "attachment; filename=""" + "streamed.mp3" + """")
            resp.AddHeader("Content-Length", fileResp.ContentLength.ToString())

            Dim length As Integer
            Do
                ' Verify that the client is connected.
                If resp.IsClientConnected Then
                    ' Read data into the buffer.
                    length = stream.Read(buffer, 0, bytesToRead)

                    ' and write it out to the response's output stream
                    resp.OutputStream.Write(buffer, 0, length)

                    ' Flush the data
                    resp.Flush()

                    'Clear the buffer
                    buffer = New [Byte](bytesToRead - 1) {}
                Else
                    ' cancel the download if client has disconnected
                    length = -1
                End If
                'Repeat until no data is read
            Loop While length > 0
        Finally
            If stream IsNot Nothing Then
                'Close the input stream
                stream.Close()
            End If
        End Try








        'Try
        '    Dim pos As Integer
        '    Dim length As Integer

        '    ' Check start parameter if present
        '    Dim filename As String = Path.GetFileName(context.Request.FilePath)

        '    Using fs As New FileStream(context.Server.MapPath(filename), FileMode.Open, FileAccess.Read, FileShare.Read)
        '        Dim qs As String = context.Request.Params("start")

        '        If String.IsNullOrEmpty(qs) Then
        '            pos = 0
        '            length = Convert.ToInt32(fs.Length)
        '        Else
        '            pos = Convert.ToInt32(qs)
        '            length = Convert.ToInt32(fs.Length - pos) + _flvheader.Length
        '        End If

        '        ' Add HTTP header stuff: cache, content type and length        
        '        context.Response.Cache.SetCacheability(HttpCacheability.[Public])
        '        context.Response.Cache.SetLastModified(DateTime.Now)

        '        context.Response.AppendHeader("Content-Type", "video/x-flv")
        '        context.Response.AppendHeader("Content-Length", length.ToString())

        '        ' Append FLV header when sending partial file
        '        If pos > 0 Then
        '            context.Response.OutputStream.Write(_flvheader, 0, _flvheader.Length)
        '            fs.Position = pos
        '        End If

        '        ' Read buffer and write stream to the response stream
        '        Const buffersize As Integer = 16384
        '        Dim buffer As Byte() = New Byte(buffersize - 1) {}

        '        Dim count As Integer = fs.Read(buffer, 0, buffersize)
        '        While count > 0
        '            If context.Response.IsClientConnected Then
        '                context.Response.OutputStream.Write(buffer, 0, count)
        '                context.Response.Flush()

        '                count = fs.Read(buffer, 0, buffersize)
        '            Else
        '                count = -1
        '            End If
        '        End While
        '    End Using
        'Catch ex As Exception
        '    System.Diagnostics.Debug.WriteLine(ex.ToString())
        'End Try
    End Sub

    Public ReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable
        Get
            Return True
        End Get
    End Property

    Private Shared Function HexToByte(hexString As String) As Byte()
        Dim returnBytes As Byte() = New Byte(hexString.Length / 2 - 1) {}
        For i As Integer = 0 To returnBytes.Length - 1
            returnBytes(i) = Convert.ToByte(hexString.Substring(i * 2, 2), 16)
        Next
        Return returnBytes
    End Function

End Class

'=======================================================
'Service provided by Telerik (www.telerik.com)
'Conversion powered by NRefactory.
'Twitter: @telerik
'Facebook: facebook.com/telerik
'=======================================================


    